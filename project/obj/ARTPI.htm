<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\project\obj\ARTPI.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\project\obj\ARTPI.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Jan 11 13:10:13 2021
<BR><P>
<H3>Maximum Stack Usage =        948 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
cmd_cp &rArr; copy &rArr; copydir &rArr;  copydir (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[81]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[81]">ADC3_IRQHandler</a><BR>
 <LI><a href="#[1bc]">rt_assert_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[198]">rt_kprintf</a><BR>
 <LI><a href="#[1fa]">copydir</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1fa]">copydir</a><BR>
 <LI><a href="#[1f7]">directory_delete_for_msh</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f7]">directory_delete_for_msh</a><BR>
 <LI><a href="#[2c7]">msh_exec_script</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[270]">msh_exec</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[81]">ADC3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[83]">BDMA_Channel0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[84]">BDMA_Channel1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[85]">BDMA_Channel2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[86]">BDMA_Channel3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[87]">BDMA_Channel4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[88]">BDMA_Channel5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[89]">BDMA_Channel6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8a]">BDMA_Channel7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32h7xx_it.o(i.BusFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[62]">CEC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8b]">COMP1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[91]">CRS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[53]">DCMI_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[72]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[73]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[74]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[75]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[38]">DMA1_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5e]">DMA2D_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[41]">DMA2_Stream0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6a]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[82]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32h7xx_it.o(i.DebugMon_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[92]">ECC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[46]">ETH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[47]">ETH_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from drv_gpio.o(i.EXTI0_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from drv_gpio.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from drv_gpio.o(i.EXTI1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from drv_gpio.o(i.EXTI2_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from drv_gpio.o(i.EXTI3_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from drv_gpio.o(i.EXTI4_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from drv_gpio.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1d]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1f]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1e]">FDCAN2_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[20]">FDCAN2_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[48]">FDCAN_CAL_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[39]">FMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[55]">FPU_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[71]">HRTIM1_FLT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6b]">HRTIM1_Master_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6c]">HRTIM1_TIMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6d]">HRTIM1_TIMB_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6e]">HRTIM1_TIMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6f]">HRTIM1_TIMD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[70]">HRTIM1_TIME_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[80]">HSEM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4e]">I2C3_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4d]">I2C3_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[64]">I2C4_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[63]">I2C4_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7d]">JPEG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[61]">LPTIM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8c]">LPTIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8d]">LPTIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8e]">LPTIM4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8f]">LPTIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[90]">LPUART1_IRQHandler</a> from drv_usart.o(i.LPUART1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5d]">LTDC_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5c]">LTDC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7c]">MDIOS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7b]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7e]">MDMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from context_rvds.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32h7xx_it.o(i.NMI_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[67]">OTG_FS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[66]">OTG_FS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[69]">OTG_FS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[68]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[50]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4f]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[52]">OTG_HS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[51]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b]">PVD_AVD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[60]">QUADSPI_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[54]">RNG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5b]">SAI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5f]">SAI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[76]">SAI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[93]">SAI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3a]">SDMMC1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7f]">SDMMC2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[f5]">SDRAM_Init</a> from drv_sdram.o(i.SDRAM_Init) referenced from drv_sdram.o(.rti_fn.1)
 <LI><a href="#[65]">SPDIF_RX_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3c]">SPI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[58]">SPI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[59]">SPI5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5a]">SPI6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9a]">SPI_DMAError</a> from stm32h7xx_hal_spi.o(i.SPI_DMAError) referenced from stm32h7xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
 <LI><a href="#[9a]">SPI_DMAError</a> from stm32h7xx_hal_spi.o(i.SPI_DMAError) referenced from stm32h7xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[9a]">SPI_DMAError</a> from stm32h7xx_hal_spi.o(i.SPI_DMAError) referenced from stm32h7xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[98]">SPI_DMAHalfReceiveCplt</a> from stm32h7xx_hal_spi.o(i.SPI_DMAHalfReceiveCplt) referenced from stm32h7xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
 <LI><a href="#[98]">SPI_DMAHalfReceiveCplt</a> from stm32h7xx_hal_spi.o(i.SPI_DMAHalfReceiveCplt) referenced from stm32h7xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[9d]">SPI_DMAHalfTransmitCplt</a> from stm32h7xx_hal_spi.o(i.SPI_DMAHalfTransmitCplt) referenced from stm32h7xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[9b]">SPI_DMAHalfTransmitReceiveCplt</a> from stm32h7xx_hal_spi.o(i.SPI_DMAHalfTransmitReceiveCplt) referenced from stm32h7xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[99]">SPI_DMAReceiveCplt</a> from stm32h7xx_hal_spi.o(i.SPI_DMAReceiveCplt) referenced from stm32h7xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
 <LI><a href="#[99]">SPI_DMAReceiveCplt</a> from stm32h7xx_hal_spi.o(i.SPI_DMAReceiveCplt) referenced from stm32h7xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[9e]">SPI_DMATransmitCplt</a> from stm32h7xx_hal_spi.o(i.SPI_DMATransmitCplt) referenced from stm32h7xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[9c]">SPI_DMATransmitReceiveCplt</a> from stm32h7xx_hal_spi.o(i.SPI_DMATransmitReceiveCplt) referenced from stm32h7xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
 <LI><a href="#[6]">SVC_Handler</a> from stm32h7xx_it.o(i.SVC_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[77]">SWPMI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from drv_common.o(i.SysTick_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[96]">SystemInit</a> from system_stm32h7xx.o(i.SystemInit) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[78]">TIM15_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[79]">TIM16_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7a]">TIM17_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3b]">TIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3f]">TIM6_DAC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[40]">TIM7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[34]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[37]">TIM8_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[36]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[35]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3d]">UART4_IRQHandler</a> from drv_usart.o(i.UART4_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3e]">UART5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[56]">UART7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[57]">UART8_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a1]">UART_DMAError</a> from stm32h7xx_hal_uart.o(i.UART_DMAError) referenced from stm32h7xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[9f]">UART_DMATransmitCplt</a> from stm32h7xx_hal_uart.o(i.UART_DMATransmitCplt) referenced from stm32h7xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[a0]">UART_DMATxHalfCplt</a> from stm32h7xx_hal_uart.o(i.UART_DMATxHalfCplt) referenced from stm32h7xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4c]">USART6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32h7xx_it.o(i.UsageFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[94]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[97]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[aa]">_pin_control</a> from pin.o(i._pin_control) referenced from pin.o(i.rt_device_pin_register)
 <LI><a href="#[a8]">_pin_read</a> from pin.o(i._pin_read) referenced from pin.o(i.rt_device_pin_register)
 <LI><a href="#[a9]">_pin_write</a> from pin.o(i._pin_write) referenced from pin.o(i.rt_device_pin_register)
 <LI><a href="#[a2]">_snputc</a> from printf2.o(i._snputc) referenced from printf2.o(i.__0snprintf$2)
 <LI><a href="#[bf]">_spi_bus_device_control</a> from spi_dev.o(i._spi_bus_device_control) referenced from spi_dev.o(i.rt_spi_bus_device_init)
 <LI><a href="#[bd]">_spi_bus_device_read</a> from spi_dev.o(i._spi_bus_device_read) referenced from spi_dev.o(i.rt_spi_bus_device_init)
 <LI><a href="#[be]">_spi_bus_device_write</a> from spi_dev.o(i._spi_bus_device_write) referenced from spi_dev.o(i.rt_spi_bus_device_init)
 <LI><a href="#[c2]">_spidev_device_control</a> from spi_dev.o(i._spidev_device_control) referenced from spi_dev.o(i.rt_spidev_device_init)
 <LI><a href="#[c0]">_spidev_device_read</a> from spi_dev.o(i._spidev_device_read) referenced from spi_dev.o(i.rt_spidev_device_init)
 <LI><a href="#[c1]">_spidev_device_write</a> from spi_dev.o(i._spidev_device_write) referenced from spi_dev.o(i.rt_spidev_device_init)
 <LI><a href="#[12a]">cat</a> from dfs_file.o(i.cat) referenced from dfs_file.o(FSymTab)
 <LI><a href="#[12f]">chdir</a> from dfs_posix.o(i.chdir) referenced from dfs_posix.o(FSymTab)
 <LI><a href="#[101]">clear</a> from cmd.o(i.clear) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[113]">cmd_cat</a> from msh_file.o(i.cmd_cat) referenced from msh_file.o(FSymTab)
 <LI><a href="#[115]">cmd_cd</a> from msh_file.o(i.cmd_cd) referenced from msh_file.o(FSymTab)
 <LI><a href="#[111]">cmd_cp</a> from msh_file.o(i.cmd_cp) referenced from msh_file.o(FSymTab)
 <LI><a href="#[119]">cmd_df</a> from msh_file.o(i.cmd_df) referenced from msh_file.o(FSymTab)
 <LI><a href="#[11a]">cmd_echo</a> from msh_file.o(i.cmd_echo) referenced from msh_file.o(FSymTab)
 <LI><a href="#[10f]">cmd_free</a> from msh.o(i.cmd_free) referenced from msh.o(FSymTab)
 <LI><a href="#[110]">cmd_ls</a> from msh_file.o(i.cmd_ls) referenced from msh_file.o(FSymTab)
 <LI><a href="#[117]">cmd_mkdir</a> from msh_file.o(i.cmd_mkdir) referenced from msh_file.o(FSymTab)
 <LI><a href="#[118]">cmd_mkfs</a> from msh_file.o(i.cmd_mkfs) referenced from msh_file.o(FSymTab)
 <LI><a href="#[112]">cmd_mv</a> from msh_file.o(i.cmd_mv) referenced from msh_file.o(FSymTab)
 <LI><a href="#[10e]">cmd_ps</a> from msh.o(i.cmd_ps) referenced from msh.o(FSymTab)
 <LI><a href="#[116]">cmd_pwd</a> from msh_file.o(i.cmd_pwd) referenced from msh_file.o(FSymTab)
 <LI><a href="#[114]">cmd_rm</a> from msh_file.o(i.cmd_rm) referenced from msh_file.o(FSymTab)
 <LI><a href="#[12b]">copy</a> from dfs_file.o(i.copy) referenced from dfs_file.o(FSymTab)
 <LI><a href="#[122]">date</a> from rtc.o(i.date) referenced from rtc.o(FSymTab)
 <LI><a href="#[12d]">df</a> from dfs_fs.o(i.df) referenced from dfs_fs.o(FSymTab)
 <LI><a href="#[da]">dfs_device_fs_close</a> from devfs.o(i.dfs_device_fs_close) referenced from devfs.o(.constdata)
 <LI><a href="#[de]">dfs_device_fs_getdents</a> from devfs.o(i.dfs_device_fs_getdents) referenced from devfs.o(.constdata)
 <LI><a href="#[db]">dfs_device_fs_ioctl</a> from devfs.o(i.dfs_device_fs_ioctl) referenced from devfs.o(.constdata)
 <LI><a href="#[e0]">dfs_device_fs_mount</a> from devfs.o(i.dfs_device_fs_mount) referenced from devfs.o(.constdata)
 <LI><a href="#[d9]">dfs_device_fs_open</a> from devfs.o(i.dfs_device_fs_open) referenced from devfs.o(.constdata)
 <LI><a href="#[df]">dfs_device_fs_poll</a> from devfs.o(i.dfs_device_fs_poll) referenced from devfs.o(.constdata)
 <LI><a href="#[dc]">dfs_device_fs_read</a> from devfs.o(i.dfs_device_fs_read) referenced from devfs.o(.constdata)
 <LI><a href="#[e1]">dfs_device_fs_stat</a> from devfs.o(i.dfs_device_fs_stat) referenced from devfs.o(.constdata)
 <LI><a href="#[dd]">dfs_device_fs_write</a> from devfs.o(i.dfs_device_fs_write) referenced from devfs.o(.constdata)
 <LI><a href="#[e3]">dfs_elm_close</a> from dfs_elm.o(i.dfs_elm_close) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[e7]">dfs_elm_flush</a> from dfs_elm.o(i.dfs_elm_flush) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[e9]">dfs_elm_getdents</a> from dfs_elm.o(i.dfs_elm_getdents) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[e4]">dfs_elm_ioctl</a> from dfs_elm.o(i.dfs_elm_ioctl) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[e8]">dfs_elm_lseek</a> from dfs_elm.o(i.dfs_elm_lseek) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[ec]">dfs_elm_mkfs</a> from dfs_elm.o(i.dfs_elm_mkfs) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[ea]">dfs_elm_mount</a> from dfs_elm.o(i.dfs_elm_mount) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[e2]">dfs_elm_open</a> from dfs_elm.o(i.dfs_elm_open) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[e5]">dfs_elm_read</a> from dfs_elm.o(i.dfs_elm_read) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[f0]">dfs_elm_rename</a> from dfs_elm.o(i.dfs_elm_rename) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[ef]">dfs_elm_stat</a> from dfs_elm.o(i.dfs_elm_stat) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[ed]">dfs_elm_statfs</a> from dfs_elm.o(i.dfs_elm_statfs) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[ee]">dfs_elm_unlink</a> from dfs_elm.o(i.dfs_elm_unlink) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[eb]">dfs_elm_unmount</a> from dfs_elm.o(i.dfs_elm_unmount) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[e6]">dfs_elm_write</a> from dfs_elm.o(i.dfs_elm_write) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[f8]">dfs_init</a> from dfs.o(i.dfs_init) referenced from dfs.o(.rti_fn.2)
 <LI><a href="#[fc]">elm_init</a> from dfs_elm.o(i.elm_init) referenced from dfs_elm.o(.rti_fn.4)
 <LI><a href="#[a5]">finsh_rx_ind</a> from shell.o(i.finsh_rx_ind) referenced from shell.o(i.finsh_set_device)
 <LI><a href="#[fd]">finsh_system_init</a> from shell.o(i.finsh_system_init) referenced from shell.o(.rti_fn.6)
 <LI><a href="#[a6]">finsh_thread_entry</a> from shell.o(i.finsh_thread_entry) referenced from shell.o(i.finsh_system_init)
 <LI><a href="#[100]">hello</a> from cmd.o(i.hello) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[fb]">libc_system_init</a> from libc.o(i.libc_system_init) referenced from libc.o(.rti_fn.4)
 <LI><a href="#[10c]">list</a> from cmd.o(i.list) referenced from cmd.o(FSymTab)
 <LI><a href="#[11f]">list_date</a> from rtc.o(i.list_date) referenced from rtc.o(FSymTab)
 <LI><a href="#[10b]">list_device</a> from cmd.o(i.list_device) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[105]">list_event</a> from cmd.o(i.list_event) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[127]">list_fd</a> from dfs.o(i.list_fd) referenced from dfs.o(FSymTab)
 <LI><a href="#[107]">list_mailbox</a> from cmd.o(i.list_mailbox) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[109]">list_memheap</a> from cmd.o(i.list_memheap) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[108]">list_msgqueue</a> from cmd.o(i.list_msgqueue) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[106]">list_mutex</a> from cmd.o(i.list_mutex) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[104]">list_sem</a> from cmd.o(i.list_sem) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[103]">list_thread</a> from cmd.o(i.list_thread) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[10a]">list_timer</a> from cmd.o(i.list_timer) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[128]">ls</a> from dfs_file.o(i.ls) referenced from dfs_file.o(FSymTab)
 <LI><a href="#[95]">main</a> from components.o(i.$Sub$$main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[a7]">main_thread_entry</a> from components.o(i.main_thread_entry) referenced from components.o(i.rt_application_init)
 <LI><a href="#[12e]">mkdir</a> from dfs_posix.o(i.mkdir) referenced from dfs_posix.o(FSymTab)
 <LI><a href="#[12c]">mkfs</a> from dfs_fs.o(i.mkfs) referenced from dfs_fs.o(FSymTab)
 <LI><a href="#[b9]">mmcsd_detect</a> from mmcsd_core.o(i.mmcsd_detect) referenced from mmcsd_core.o(i.rt_mmcsd_core_init)
 <LI><a href="#[10d]">msh_help</a> from msh.o(i.msh_help) referenced from msh.o(FSymTab)
 <LI><a href="#[ff]">my_lcd</a> from main.o(i.my_lcd) referenced from main.o(FSymTab)
 <LI><a href="#[d7]">qspi_configure</a> from drv_qspi.o(i.qspi_configure) referenced from drv_qspi.o(.constdata)
 <LI><a href="#[c5]">qspi_read</a> from spi_flash_sfud.o(i.qspi_read) referenced from spi_flash_sfud.o(i.sfud_spi_port_init)
 <LI><a href="#[d8]">qspixfer</a> from drv_qspi.o(i.qspixfer) referenced from drv_qspi.o(.constdata)
 <LI><a href="#[124]">reboot</a> from drv_common.o(i.reboot) referenced from drv_common.o(FSymTab)
 <LI><a href="#[c8]">retry_delay_100us</a> from spi_flash_sfud.o(i.retry_delay_100us) referenced from spi_flash_sfud.o(i.sfud_spi_port_init)
 <LI><a href="#[129]">rm</a> from dfs_file.o(i.rm) referenced from dfs_file.o(FSymTab)
 <LI><a href="#[f4]">rt_hw_qspi_bus_init</a> from drv_qspi.o(i.rt_hw_qspi_bus_init) referenced from drv_qspi.o(.rti_fn.1)
 <LI><a href="#[f9]">rt_hw_rtc_init</a> from drv_rtc.o(i.rt_hw_rtc_init) referenced from drv_rtc.o(.rti_fn.3)
 <LI><a href="#[fa]">rt_hw_spi_flash_with_sfud_init</a> from w25qxx_driver_for_rtt.o(i.rt_hw_spi_flash_with_sfud_init) referenced from w25qxx_driver_for_rtt.o(.rti_fn.4)
 <LI><a href="#[f3]">rt_hw_spi_init</a> from drv_spi.o(i.rt_hw_spi_init) referenced from drv_spi.o(.rti_fn.1)
 <LI><a href="#[b5]">rt_mmcsd_close</a> from block_dev.o(i.rt_mmcsd_close) referenced from block_dev.o(i.rt_mmcsd_blk_probe)
 <LI><a href="#[b8]">rt_mmcsd_control</a> from block_dev.o(i.rt_mmcsd_control) referenced from block_dev.o(i.rt_mmcsd_blk_probe)
 <LI><a href="#[f7]">rt_mmcsd_core_init</a> from mmcsd_core.o(i.rt_mmcsd_core_init) referenced from mmcsd_core.o(.rti_fn.2)
 <LI><a href="#[b3]">rt_mmcsd_init</a> from block_dev.o(i.rt_mmcsd_init) referenced from block_dev.o(i.rt_mmcsd_blk_probe)
 <LI><a href="#[b4]">rt_mmcsd_open</a> from block_dev.o(i.rt_mmcsd_open) referenced from block_dev.o(i.rt_mmcsd_blk_probe)
 <LI><a href="#[b6]">rt_mmcsd_read</a> from block_dev.o(i.rt_mmcsd_read) referenced from block_dev.o(i.rt_mmcsd_blk_probe)
 <LI><a href="#[b7]">rt_mmcsd_write</a> from block_dev.o(i.rt_mmcsd_write) referenced from block_dev.o(i.rt_mmcsd_blk_probe)
 <LI><a href="#[11e]">rt_pin_get</a> from pin.o(i.rt_pin_get) referenced from pin.o(FSymTab)
 <LI><a href="#[11b]">rt_pin_mode</a> from pin.o(i.rt_pin_mode) referenced from pin.o(FSymTab)
 <LI><a href="#[11d]">rt_pin_read</a> from pin.o(i.rt_pin_read) referenced from pin.o(FSymTab)
 <LI><a href="#[11c]">rt_pin_write</a> from pin.o(i.rt_pin_write) referenced from pin.o(FSymTab)
 <LI><a href="#[ab]">rt_rtc_control</a> from drv_rtc.o(i.rt_rtc_control) referenced from drv_rtc.o(i.rt_hw_rtc_register)
 <LI><a href="#[ae]">rt_serial_close</a> from serial.o(i.rt_serial_close) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[b1]">rt_serial_control</a> from serial.o(i.rt_serial_control) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[ac]">rt_serial_init</a> from serial.o(i.rt_serial_init) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[ad]">rt_serial_open</a> from serial.o(i.rt_serial_open) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[af]">rt_serial_read</a> from serial.o(i.rt_serial_read) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[b0]">rt_serial_write</a> from serial.o(i.rt_serial_write) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[bc]">rt_sfud_control</a> from spi_flash_sfud.o(i.rt_sfud_control) referenced from spi_flash_sfud.o(i.rt_sfud_flash_probe_ex)
 <LI><a href="#[ba]">rt_sfud_read</a> from spi_flash_sfud.o(i.rt_sfud_read) referenced from spi_flash_sfud.o(i.rt_sfud_flash_probe_ex)
 <LI><a href="#[bb]">rt_sfud_write</a> from spi_flash_sfud.o(i.rt_sfud_write) referenced from spi_flash_sfud.o(i.rt_sfud_flash_probe_ex)
 <LI><a href="#[a3]">rt_thread_exit</a> from thread.o(i.rt_thread_exit) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[c3]">rt_thread_idle_entry</a> from idle.o(i.rt_thread_idle_entry) referenced from idle.o(i.rt_thread_idle_init)
 <LI><a href="#[a4]">rt_thread_timeout</a> from thread.o(i.rt_thread_timeout) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[f6]">rti_board_end</a> from components.o(i.rti_board_end) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[f2]">rti_board_start</a> from components.o(i.rti_board_start) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[fe]">rti_end</a> from components.o(i.rti_end) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[f1]">rti_start</a> from components.o(i.rti_start) referenced from components.o(.rti_fn.0)
 <LI><a href="#[126]">sdram_t</a> from drv_sdram.o(i.sdram_t) referenced from drv_sdram.o(FSymTab)
 <LI><a href="#[125]">sdram_test</a> from drv_sdram.o(i.sdram_test) referenced from drv_sdram.o(FSymTab)
 <LI><a href="#[120]">set_date</a> from rtc.o(i.set_date) referenced from rtc.o(FSymTab)
 <LI><a href="#[121]">set_time</a> from rtc.o(i.set_time) referenced from rtc.o(FSymTab)
 <LI><a href="#[123]">sf</a> from spi_flash_sfud.o(i.sf) referenced from spi_flash_sfud.o(FSymTab)
 <LI><a href="#[d0]">spi_configure</a> from drv_spi.o(i.spi_configure) referenced from drv_spi.o(.constdata)
 <LI><a href="#[c6]">spi_lock</a> from spi_flash_sfud.o(i.spi_lock) referenced from spi_flash_sfud.o(i.sfud_spi_port_init)
 <LI><a href="#[c7]">spi_unlock</a> from spi_flash_sfud.o(i.spi_unlock) referenced from spi_flash_sfud.o(i.sfud_spi_port_init)
 <LI><a href="#[c4]">spi_write_read</a> from spi_flash_sfud.o(i.spi_write_read) referenced from spi_flash_sfud.o(i.sfud_spi_port_init)
 <LI><a href="#[d1]">spixfer</a> from drv_spi.o(i.spixfer) referenced from drv_spi.o(.constdata)
 <LI><a href="#[d2]">stm32_configure</a> from drv_usart.o(i.stm32_configure) referenced from drv_usart.o(.constdata)
 <LI><a href="#[d3]">stm32_control</a> from drv_usart.o(i.stm32_control) referenced from drv_usart.o(.constdata)
 <LI><a href="#[d6]">stm32_dma_transmit</a> from drv_usart.o(i.stm32_dma_transmit) referenced from drv_usart.o(.constdata)
 <LI><a href="#[d5]">stm32_getc</a> from drv_usart.o(i.stm32_getc) referenced from drv_usart.o(.constdata)
 <LI><a href="#[cc]">stm32_pin_attach_irq</a> from drv_gpio.o(i.stm32_pin_attach_irq) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[cd]">stm32_pin_dettach_irq</a> from drv_gpio.o(i.stm32_pin_dettach_irq) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[cf]">stm32_pin_get</a> from drv_gpio.o(i.stm32_pin_get) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[ce]">stm32_pin_irq_enable</a> from drv_gpio.o(i.stm32_pin_irq_enable) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[c9]">stm32_pin_mode</a> from drv_gpio.o(i.stm32_pin_mode) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[cb]">stm32_pin_read</a> from drv_gpio.o(i.stm32_pin_read) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[ca]">stm32_pin_write</a> from drv_gpio.o(i.stm32_pin_write) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[d4]">stm32_putc</a> from drv_usart.o(i.stm32_putc) referenced from drv_usart.o(.constdata)
 <LI><a href="#[102]">version</a> from cmd.o(i.version) referenced 2 times from cmd.o(FSymTab)
 <LI><a href="#[b2]">w25qxx_enter_qspi_mode</a> from w25qxx_driver_for_rtt.o(i.w25qxx_enter_qspi_mode) referenced from w25qxx_driver_for_rtt.o(i.rt_hw_spi_flash_with_sfud_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[97]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[366]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[130]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[140]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[367]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[368]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[369]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[36a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[36b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1b5]"></a>__rt_ffs</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cpuport.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_voltage
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_highest_priority_thread
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>BDMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>BDMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>BDMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>BDMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>BDMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>BDMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>BDMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>BDMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>HRTIM1_FLT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>HRTIM1_Master_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>HRTIM1_TIMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>HRTIM1_TIMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>HRTIM1_TIMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>HRTIM1_TIMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>HRTIM1_TIME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>LPTIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>MDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_FS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OTG_FS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>SAI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>SAI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1c0]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_dettach_irq
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_attach_irq
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
</UL>

<P><STRONG><a name="[1ca]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_dettach_irq
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_attach_irq
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
</UL>

<P><STRONG><a name="[325]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[326]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[335]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[36c]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[133]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[136]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
</UL>

<P><STRONG><a name="[26b]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
</UL>

<P><STRONG><a name="[293]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_qspi_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[36d]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[36e]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[36f]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
</UL>

<P><STRONG><a name="[14e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rtc_time_stamp
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_init
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_config
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtc_timestamp
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_switch
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_app_cmd
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_table
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
</UL>

<P><STRONG><a name="[370]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[25f]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[2c8]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
</UL>

<P><STRONG><a name="[1e5]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[1df]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[1ed]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkfs
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_df
</UL>

<P><STRONG><a name="[35a]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
</UL>

<P><STRONG><a name="[25d]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[230]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
</UL>

<P><STRONG><a name="[1b7]"></a>strrchr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_path_lastname
</UL>

<P><STRONG><a name="[13a]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[13e]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
</UL>

<P><STRONG><a name="[135]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[371]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[372]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[13c]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[131]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[373]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[374]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[375]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, components.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI2_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI4_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_gpio.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[17c]"></a>FMC_SDRAM_Init</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, stm32h7xx_ll_fmc.o(i.FMC_SDRAM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[17f]"></a>FMC_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32h7xx_ll_fmc.o(i.FMC_SDRAM_ProgramRefreshRate))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>

<P><STRONG><a name="[181]"></a>FMC_SDRAM_SendCommand</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32h7xx_ll_fmc.o(i.FMC_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>

<P><STRONG><a name="[17d]"></a>FMC_SDRAM_Timing_Init</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, stm32h7xx_ll_fmc.o(i.FMC_SDRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_SDRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[19b]"></a>HAL_DMA_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(i.HAL_DMA_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAError
</UL>

<P><STRONG><a name="[145]"></a>HAL_DMA_Init</STRONG> (Thumb, 1304 bytes, Stack size 24 bytes, stm32h7xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CalcDMAMUXChannelBaseAndMask
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXRequestGenBaseAndMask
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXChannelBaseAndMask
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_init
</UL>

<P><STRONG><a name="[14b]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 980 bytes, Stack size 24 bytes, stm32h7xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
</UL>

<P><STRONG><a name="[195]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 328 bytes, Stack size 20 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[150]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, drv_gpio.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[143]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[14f]"></a>HAL_GPIO_Init</STRONG> (Thumb, 468 bytes, Stack size 24 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_mode
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_device_attach
</UL>

<P><STRONG><a name="[363]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_read
</UL>

<P><STRONG><a name="[2fa]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_write
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_device_attach
</UL>

<P><STRONG><a name="[16e]"></a>HAL_GetREVID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_GetREVID))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[146]"></a>HAL_GetTick</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_common.o(i.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[153]"></a>HAL_Init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, stm32h7xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_Init &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[156]"></a>HAL_InitTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_common.o(i.HAL_InitTick))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[157]"></a>HAL_MspInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32h7xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[362]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
</UL>

<P><STRONG><a name="[361]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
</UL>

<P><STRONG><a name="[158]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
</UL>

<P><STRONG><a name="[154]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[15b]"></a>HAL_PWREx_ConfigSupply</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32h7xx_hal_pwr_ex.o(i.HAL_PWREx_ConfigSupply))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PWREx_ConfigSupply &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1a6]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_config
</UL>

<P><STRONG><a name="[15c]"></a>HAL_QSPI_Command</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32h7xx_hal_qspi.o(i.HAL_QSPI_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Config
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_send_cmd
</UL>

<P><STRONG><a name="[15f]"></a>HAL_QSPI_Init</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, stm32h7xx_hal_qspi.o(i.HAL_QSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_QSPI_Init &rArr; HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_SetTimeout
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_qspi_init
</UL>

<P><STRONG><a name="[160]"></a>HAL_QSPI_MspInit</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, drv_qspi.o(i.HAL_QSPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_QSPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[162]"></a>HAL_QSPI_Receive</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, stm32h7xx_hal_qspi.o(i.HAL_QSPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_QSPI_Receive &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspixfer
</UL>

<P><STRONG><a name="[161]"></a>HAL_QSPI_SetTimeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_qspi.o(i.HAL_QSPI_SetTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
</UL>

<P><STRONG><a name="[163]"></a>HAL_QSPI_Transmit</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, stm32h7xx_hal_qspi.o(i.HAL_QSPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_QSPI_Transmit &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WaitFlagStateUntilTimeout
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspixfer
</UL>

<P><STRONG><a name="[1a9]"></a>HAL_RCCEx_EnableLSECSS</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_EnableLSECSS))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[164]"></a>HAL_RCCEx_GetD1SysClockFreq</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetD1SysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_systick_init
</UL>

<P><STRONG><a name="[165]"></a>HAL_RCCEx_GetD3PCLK1Freq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetD3PCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1b0]"></a>HAL_RCCEx_GetPLL2ClockFreq</STRONG> (Thumb, 536 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPLL2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetPLL2ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1b1]"></a>HAL_RCCEx_GetPLL3ClockFreq</STRONG> (Thumb, 536 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPLL3ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetPLL3ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[167]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 2876 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_config
</UL>

<P><STRONG><a name="[16a]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 774 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1a8]"></a>HAL_RCC_EnableCSS</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_EnableCSS))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[166]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_qspi_init
</UL>

<P><STRONG><a name="[16b]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[16c]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[155]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 524 bytes, Stack size 20 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD1SysClockFreq
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_init
</UL>

<P><STRONG><a name="[16d]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 2010 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_init
</UL>

<P><STRONG><a name="[321]"></a>HAL_RTCEx_BKUPRead</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_rtc_ex.o(i.HAL_RTCEx_BKUPRead))
<BR><BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_config
</UL>

<P><STRONG><a name="[357]"></a>HAL_RTCEx_BKUPWrite</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32h7xx_hal_rtc_ex.o(i.HAL_RTCEx_BKUPWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTCEx_BKUPWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rtc_time_stamp
</UL>

<P><STRONG><a name="[16f]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32h7xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtc_timestamp
</UL>

<P><STRONG><a name="[171]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32h7xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtc_timestamp
</UL>

<P><STRONG><a name="[172]"></a>HAL_RTC_Init</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, stm32h7xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RTC_Init &rArr; RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_config
</UL>

<P><STRONG><a name="[173]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_rtc.o(i.HAL_RTC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[176]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, stm32h7xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rtc_time_stamp
</UL>

<P><STRONG><a name="[178]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, stm32h7xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rtc_time_stamp
</UL>

<P><STRONG><a name="[179]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32h7xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_WaitForSynchro &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
</UL>

<P><STRONG><a name="[17a]"></a>HAL_SDRAM_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32h7xx_hal_sdram.o(i.HAL_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Timing_Init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Init
</UL>

<P><STRONG><a name="[17b]"></a>HAL_SDRAM_MspInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_sdram.o(i.HAL_SDRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SDRAM_MspInit &rArr; HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FMC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[17e]"></a>HAL_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32h7xx_hal_sdram.o(i.HAL_SDRAM_ProgramRefreshRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Initialization_Sequence
</UL>

<P><STRONG><a name="[180]"></a>HAL_SDRAM_SendCommand</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, stm32h7xx_hal_sdram.o(i.HAL_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Initialization_Sequence
</UL>

<P><STRONG><a name="[19c]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_spi.o(i.HAL_SPI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAError
</UL>

<P><STRONG><a name="[360]"></a>HAL_SPI_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal_spi.o(i.HAL_SPI_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
</UL>

<P><STRONG><a name="[182]"></a>HAL_SPI_Init</STRONG> (Thumb, 354 bytes, Stack size 16 bytes, stm32h7xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetPacketSize
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_init
</UL>

<P><STRONG><a name="[184]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, drv_spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[185]"></a>HAL_SPI_Receive</STRONG> (Thumb, 694 bytes, Stack size 32 bytes, stm32h7xx_hal_spi.o(i.HAL_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
</UL>

<P><STRONG><a name="[188]"></a>HAL_SPI_Receive_DMA</STRONG> (Thumb, 488 bytes, Stack size 24 bytes, stm32h7xx_hal_spi.o(i.HAL_SPI_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_SPI_Receive_DMA &rArr; HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
</UL>

<P><STRONG><a name="[1a0]"></a>HAL_SPI_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_spi.o(i.HAL_SPI_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAReceiveCplt
</UL>

<P><STRONG><a name="[19d]"></a>HAL_SPI_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_spi.o(i.HAL_SPI_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfReceiveCplt
</UL>

<P><STRONG><a name="[18a]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 694 bytes, Stack size 32 bytes, stm32h7xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
</UL>

<P><STRONG><a name="[186]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 1016 bytes, Stack size 64 bytes, stm32h7xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
</UL>

<P><STRONG><a name="[189]"></a>HAL_SPI_TransmitReceive_DMA</STRONG> (Thumb, 650 bytes, Stack size 32 bytes, stm32h7xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_SPI_TransmitReceive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
</UL>

<P><STRONG><a name="[18c]"></a>HAL_SPI_Transmit_DMA</STRONG> (Thumb, 458 bytes, Stack size 24 bytes, stm32h7xx_hal_spi.o(i.HAL_SPI_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_SPI_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_spi.o(i.HAL_SPI_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
</UL>

<P><STRONG><a name="[19e]"></a>HAL_SPI_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_spi.o(i.HAL_SPI_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfTransmitCplt
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_SPI_TxRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_spi.o(i.HAL_SPI_TxRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitReceiveCplt
</UL>

<P><STRONG><a name="[19f]"></a>HAL_SPI_TxRxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_spi.o(i.HAL_SPI_TxRxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfTransmitReceiveCplt
</UL>

<P><STRONG><a name="[300]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_systick_init
</UL>

<P><STRONG><a name="[18d]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_systick_init
</UL>

<P><STRONG><a name="[18e]"></a>HAL_UART_DeInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_UART_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
</UL>

<P><STRONG><a name="[1ad]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[190]"></a>HAL_UART_Init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_configure
</UL>

<P><STRONG><a name="[18f]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, drv_usart.o(i.HAL_UART_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>

<P><STRONG><a name="[191]"></a>HAL_UART_MspInit</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, drv_usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[196]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_dma_transmit
</UL>

<P><STRONG><a name="[1ae]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[1af]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[90]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usart.o(i.LPUART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = LPUART1_IRQHandler &rArr; uart_isr &rArr; rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[170]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32h7xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>

<P><STRONG><a name="[177]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32h7xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[174]"></a>RTC_EnterInitMode</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32h7xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_EnterInitMode &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[175]"></a>RTC_ExitInitMode</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32h7xx_hal_rtc.o(i.RTC_ExitInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_common.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1a5]"></a>SystemClock_Config</STRONG> (Thumb, 332 bytes, Stack size 304 bytes, sys_conf.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SystemClock_Config &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_EnableCSS
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_EnableLSECSS
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[96]"></a>SystemInit</STRONG> (Thumb, 220 bytes, Stack size 0 bytes, system_stm32h7xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[3d]"></a>UART4_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usart.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = UART4_IRQHandler &rArr; uart_isr &rArr; rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[193]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[194]"></a>UART_CheckIdleState</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[192]"></a>UART_SetConfig</STRONG> (Thumb, 1420 bytes, Stack size 80 bytes, stm32h7xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1aa]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1b2]"></a>__0snprintf$2</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printf2.o(i.__0snprintf$2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[376]"></a>__1snprintf$2</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf2.o(i.__0snprintf$2), UNUSED)

<P><STRONG><a name="[28c]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf2.o(i.__0snprintf$2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_stdio_set_console
</UL>

<P><STRONG><a name="[13d]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[377]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[273]"></a>__isleap</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, time.o(i.__isleap))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>

<P><STRONG><a name="[378]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[379]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[37a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1d6]"></a>asctime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, time.o(i.asctime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = asctime &rArr; asctime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[1d7]"></a>asctime_r</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, time.o(i.asctime_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = asctime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2str
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
</UL>

<P><STRONG><a name="[12a]"></a>cat</STRONG> (Thumb, 78 bytes, Stack size 96 bytes, dfs_file.o(i.cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = cat &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_file.o(FSymTab)
</UL>
<P><STRONG><a name="[12f]"></a>chdir</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, dfs_posix.o(i.chdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = chdir &rArr; opendir &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(FSymTab)
</UL>
<P><STRONG><a name="[1ea]"></a>close</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dfs_posix.o(i.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = close &rArr; dfs_file_close &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_stdio_set_console
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
</UL>

<P><STRONG><a name="[1e4]"></a>closedir</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfs_posix.o(i.closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = closedir &rArr; dfs_file_close &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
</UL>

<P><STRONG><a name="[113]"></a>cmd_cat</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, msh_file.o(i.cmd_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = cmd_cat &rArr; cat &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[115]"></a>cmd_cd</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, msh_file.o(i.cmd_cd))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = cmd_cd &rArr; chdir &rArr; opendir &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[111]"></a>cmd_cp</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, msh_file.o(i.cmd_cp))
<BR><BR>[Stack]<UL><LI>Max Depth = 948<LI>Call Chain = cmd_cp &rArr; copy &rArr; copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[119]"></a>cmd_df</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, msh_file.o(i.cmd_df))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = cmd_df &rArr; df &rArr; dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[11a]"></a>cmd_echo</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, msh_file.o(i.cmd_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = cmd_echo &rArr; open &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[10f]"></a>cmd_free</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, msh.o(i.cmd_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = cmd_free &rArr; list_memheap &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[110]"></a>cmd_ls</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, msh_file.o(i.cmd_ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = cmd_ls &rArr; ls &rArr; dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[117]"></a>cmd_mkdir</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, msh_file.o(i.cmd_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = cmd_mkdir &rArr; mkdir &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[118]"></a>cmd_mkfs</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, msh_file.o(i.cmd_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = cmd_mkfs &rArr; dfs_mkfs &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[112]"></a>cmd_mv</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, msh_file.o(i.cmd_mv))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = cmd_mv &rArr; unlink &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[10e]"></a>cmd_ps</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, msh.o(i.cmd_ps))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = cmd_ps &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[116]"></a>cmd_pwd</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, msh_file.o(i.cmd_pwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = cmd_pwd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[114]"></a>cmd_rm</STRONG> (Thumb, 268 bytes, Stack size 96 bytes, msh_file.o(i.cmd_rm))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = cmd_rm &rArr; directory_delete_for_msh &rArr;  directory_delete_for_msh (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh_file.o(FSymTab)
</UL>
<P><STRONG><a name="[12b]"></a>copy</STRONG> (Thumb, 280 bytes, Stack size 88 bytes, dfs_file.o(i.copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 932<LI>Call Chain = copy &rArr; copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_path_lastname
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_file.o(FSymTab)
</UL>
<P><STRONG><a name="[203]"></a>ctime</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, time.o(i.ctime))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ctime &rArr; localtime &rArr; localtime_r &rArr; gmtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_date
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
</UL>

<P><STRONG><a name="[206]"></a>devfs_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, devfs.o(i.devfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = devfs_init &rArr; dfs_register &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
</UL>

<P><STRONG><a name="[12d]"></a>df</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, dfs_fs.o(i.df))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = df &rArr; dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_df
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_fs.o(FSymTab)
</UL>
<P><STRONG><a name="[da]"></a>dfs_device_fs_close</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, devfs.o(i.dfs_device_fs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = dfs_device_fs_close &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>dfs_device_fs_getdents</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, devfs.o(i.dfs_device_fs_getdents))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dfs_device_fs_getdents &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>dfs_device_fs_ioctl</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, devfs.o(i.dfs_device_fs_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dfs_device_fs_ioctl &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>dfs_device_fs_mount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, devfs.o(i.dfs_device_fs_mount))
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>dfs_device_fs_open</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, devfs.o(i.dfs_device_fs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = dfs_device_fs_open &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>dfs_device_fs_read</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, devfs.o(i.dfs_device_fs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dfs_device_fs_read &rArr; rt_device_read &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>dfs_device_fs_stat</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, devfs.o(i.dfs_device_fs_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = dfs_device_fs_stat &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>dfs_device_fs_write</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, devfs.o(i.dfs_device_fs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dfs_device_fs_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>dfs_elm_close</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, dfs_elm.o(i.dfs_elm_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = dfs_elm_close &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>dfs_elm_flush</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_elm.o(i.dfs_elm_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dfs_elm_flush &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>dfs_elm_getdents</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, dfs_elm.o(i.dfs_elm_getdents))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = dfs_elm_getdents &rArr; f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>dfs_elm_ioctl</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, dfs_elm.o(i.dfs_elm_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = dfs_elm_ioctl &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>dfs_elm_lseek</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, dfs_elm.o(i.dfs_elm_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = dfs_elm_lseek &rArr; f_seekdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>dfs_elm_mkfs</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, dfs_elm.o(i.dfs_elm_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = dfs_elm_mkfs &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>dfs_elm_mount</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, dfs_elm.o(i.dfs_elm_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = dfs_elm_mount &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>dfs_elm_open</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, dfs_elm.o(i.dfs_elm_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = dfs_elm_open &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>dfs_elm_read</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, dfs_elm.o(i.dfs_elm_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = dfs_elm_read &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>dfs_elm_rename</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, dfs_elm.o(i.dfs_elm_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = dfs_elm_rename &rArr; f_rename &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>dfs_elm_stat</STRONG> (Thumb, 254 bytes, Stack size 128 bytes, dfs_elm.o(i.dfs_elm_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = dfs_elm_stat &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>dfs_elm_statfs</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, dfs_elm.o(i.dfs_elm_statfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = dfs_elm_statfs &rArr; f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>dfs_elm_unlink</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, dfs_elm.o(i.dfs_elm_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = dfs_elm_unlink &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>dfs_elm_unmount</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dfs_elm.o(i.dfs_elm_unmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = dfs_elm_unmount &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>dfs_elm_write</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, dfs_elm.o(i.dfs_elm_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = dfs_elm_write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[258]"></a>dfs_fdtable_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dfs.o(i.dfs_fdtable_get))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[1dc]"></a>dfs_file_close</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dfs_file.o(i.dfs_file_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = dfs_file_close &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
</UL>

<P><STRONG><a name="[1fb]"></a>dfs_file_getdents</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dfs_file.o(i.dfs_file_getdents))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfs_file_getdents
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
</UL>

<P><STRONG><a name="[2d3]"></a>dfs_file_lseek</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dfs_file.o(i.dfs_file_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfs_file_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
</UL>

<P><STRONG><a name="[1da]"></a>dfs_file_open</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, dfs_file.o(i.dfs_file_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
</UL>

<P><STRONG><a name="[1db]"></a>dfs_file_read</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, dfs_file.o(i.dfs_file_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfs_file_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
</UL>

<P><STRONG><a name="[22b]"></a>dfs_file_rename</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, dfs_file.o(i.dfs_file_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = dfs_file_rename &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
</UL>

<P><STRONG><a name="[1f8]"></a>dfs_file_stat</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, dfs_file.o(i.dfs_file_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>

<P><STRONG><a name="[22c]"></a>dfs_file_unlink</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, dfs_file.o(i.dfs_file_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
</UL>

<P><STRONG><a name="[1fc]"></a>dfs_file_write</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dfs_file.o(i.dfs_file_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dfs_file_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</UL>

<P><STRONG><a name="[22e]"></a>dfs_filesystem_get_mounted_path</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dfs_fs.o(i.dfs_filesystem_get_mounted_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = dfs_filesystem_get_mounted_path &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_remove
</UL>

<P><STRONG><a name="[22f]"></a>dfs_filesystem_get_partition</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, dfs_fs.o(i.dfs_filesystem_get_partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = dfs_filesystem_get_partition &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
</UL>

<P><STRONG><a name="[228]"></a>dfs_filesystem_lookup</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, dfs_fs.o(i.dfs_filesystem_lookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = dfs_filesystem_lookup &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
</UL>

<P><STRONG><a name="[f8]"></a>dfs_init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, dfs.o(i.dfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = dfs_init &rArr; dfs_mount &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devfs_init
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[1dd]"></a>dfs_lock</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dfs.o(i.dfs_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_mounted_path
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>

<P><STRONG><a name="[1f0]"></a>dfs_mkfs</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, dfs_fs.o(i.dfs_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = dfs_mkfs &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkfs
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkfs
</UL>

<P><STRONG><a name="[232]"></a>dfs_mount</STRONG> (Thumb, 426 bytes, Stack size 88 bytes, dfs_fs.o(i.dfs_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = dfs_mount &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
</UL>

<P><STRONG><a name="[1e1]"></a>dfs_normalize_path</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, dfs.o(i.dfs_normalize_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>

<P><STRONG><a name="[207]"></a>dfs_register</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, dfs_fs.o(i.dfs_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = dfs_register &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devfs_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_init
</UL>

<P><STRONG><a name="[208]"></a>dfs_statfs</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dfs_fs.o(i.dfs_statfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
</UL>

<P><STRONG><a name="[229]"></a>dfs_subdir</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, dfs.o(i.dfs_subdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfs_subdir
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>

<P><STRONG><a name="[1de]"></a>dfs_unlock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dfs.o(i.dfs_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_mounted_path
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>

<P><STRONG><a name="[235]"></a>dfs_unmount</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, dfs_fs.o(i.dfs_unmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = dfs_unmount &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_remove
</UL>

<P><STRONG><a name="[251]"></a>disk_initialize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dfs_elm.o(i.disk_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[244]"></a>disk_ioctl</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, dfs_elm.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = disk_ioctl &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[245]"></a>disk_read</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, dfs_elm.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = disk_read &rArr; rt_device_read &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[25a]"></a>disk_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dfs_elm.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[246]"></a>disk_write</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, dfs_elm.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[21e]"></a>elm_get_vol</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ff.o(i.elm_get_vol))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</UL>

<P><STRONG><a name="[fc]"></a>elm_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dfs_elm.o(i.elm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = elm_init &rArr; dfs_register &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[213]"></a>f_close</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
</UL>

<P><STRONG><a name="[225]"></a>f_getfree</STRONG> (Thumb, 252 bytes, Stack size 72 bytes, ff.o(i.f_getfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = f_getfree &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
</UL>

<P><STRONG><a name="[218]"></a>f_lseek</STRONG> (Thumb, 730 bytes, Stack size 72 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_ioctl
</UL>

<P><STRONG><a name="[21f]"></a>f_mkdir</STRONG> (Thumb, 354 bytes, Stack size 88 bytes, ff.o(i.f_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = f_mkdir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</UL>

<P><STRONG><a name="[21c]"></a>f_mkfs</STRONG> (Thumb, 1702 bytes, Stack size 136 bytes, ff.o(i.f_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = f_mkfs &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[21b]"></a>f_mount</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[220]"></a>f_open</STRONG> (Thumb, 516 bytes, Stack size 104 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</UL>

<P><STRONG><a name="[21d]"></a>f_opendir</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
</UL>

<P><STRONG><a name="[221]"></a>f_read</STRONG> (Thumb, 478 bytes, Stack size 72 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
</UL>

<P><STRONG><a name="[216]"></a>f_readdir</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ff.o(i.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
</UL>

<P><STRONG><a name="[222]"></a>f_rename</STRONG> (Thumb, 272 bytes, Stack size 144 bytes, ff.o(i.f_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = f_rename &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
</UL>

<P><STRONG><a name="[219]"></a>f_seekdir</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ff.o(i.f_seekdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = f_seekdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
</UL>

<P><STRONG><a name="[223]"></a>f_stat</STRONG> (Thumb, 62 bytes, Stack size 64 bytes, ff.o(i.f_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
</UL>

<P><STRONG><a name="[215]"></a>f_sync</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[217]"></a>f_truncate</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, ff.o(i.f_truncate))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = f_truncate &rArr; remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_ioctl
</UL>

<P><STRONG><a name="[226]"></a>f_unlink</STRONG> (Thumb, 170 bytes, Stack size 112 bytes, ff.o(i.f_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
</UL>

<P><STRONG><a name="[227]"></a>f_write</STRONG> (Thumb, 548 bytes, Stack size 72 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
</UL>

<P><STRONG><a name="[1eb]"></a>fd_get</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dfs.o(i.fd_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = fd_get &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>

<P><STRONG><a name="[22d]"></a>fd_is_open</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, dfs.o(i.fd_is_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>

<P><STRONG><a name="[259]"></a>fd_new</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, dfs.o(i.fd_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[1ec]"></a>fd_put</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dfs.o(i.fd_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = fd_put &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>

<P><STRONG><a name="[25b]"></a>finsh_get_prompt</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, shell.o(i.finsh_get_prompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = finsh_get_prompt &rArr; getcwd &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[263]"></a>finsh_set_device</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, shell.o(i.finsh_set_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = finsh_set_device &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[265]"></a>finsh_set_prompt_mode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, shell.o(i.finsh_set_prompt_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = finsh_set_prompt_mode &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[266]"></a>finsh_system_function_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell.o(i.finsh_system_function_init))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[fd]"></a>finsh_system_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, shell.o(i.finsh_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = finsh_system_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_function_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[a6]"></a>finsh_thread_entry</STRONG> (Thumb, 1518 bytes, Stack size 0 bytes, shell.o(i.finsh_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = finsh_thread_entry &rArr; shell_auto_complete &rArr; msh_auto_complete &rArr; msh_auto_complete_path &rArr; opendir &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memmove
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(i.finsh_system_init)
</UL>
<P><STRONG><a name="[24b]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dfs_elm.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[25e]"></a>getcwd</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dfs_posix.o(i.getcwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = getcwd &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[272]"></a>gmtime_r</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, time.o(i.gmtime_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gmtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__isleap
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
</UL>

<P><STRONG><a name="[100]"></a>hello</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(i.hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = hello &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[27e]"></a>init_mmc</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, mmc.o(i.init_mmc))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = init_mmc &rArr; mmcsd_mmc_init_card &rArr; mmc_select_bus_width &rArr; mmc_compare_ext_csds &rArr; mmc_get_ext_csd &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_unlock
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_lock
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_remove
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_read_ocr
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_voltage
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[286]"></a>init_sd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, sd.o(i.init_sd))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = init_sd &rArr; rt_mmcsd_blk_probe &rArr; rt_mmcsd_req_blk &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_unlock
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_lock
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_remove
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_read_ocr
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_voltage
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[289]"></a>init_sdio</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, sdio.o(i.init_sdio))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = init_sdio &rArr; sdio_init_card &rArr; sdio_initialize_function &rArr; sdio_read_cis &rArr; sdio_io_readb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_voltage
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[28b]"></a>libc_stdio_set_console</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, stdio.o(i.libc_stdio_set_console))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = libc_stdio_set_console &rArr; open &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_system_init
</UL>

<P><STRONG><a name="[fb]"></a>libc_system_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, libc.o(i.libc_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = libc_system_init &rArr; libc_stdio_set_console &rArr; open &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_stdio_set_console
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libc.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[10c]"></a>list</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, cmd.o(i.list))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = list &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[11f]"></a>list_date</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rtc.o(i.list_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = list_date &rArr; time &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(FSymTab)
</UL>
<P><STRONG><a name="[10b]"></a>list_device</STRONG> (Thumb, 174 bytes, Stack size 96 bytes, cmd.o(i.list_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = list_device &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[105]"></a>list_event</STRONG> (Thumb, 204 bytes, Stack size 96 bytes, cmd.o(i.list_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_event &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[127]"></a>list_fd</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, dfs.o(i.list_fd))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = list_fd &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_fdtable_get
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs.o(FSymTab)
</UL>
<P><STRONG><a name="[107]"></a>list_mailbox</STRONG> (Thumb, 224 bytes, Stack size 104 bytes, cmd.o(i.list_mailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = list_mailbox &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[109]"></a>list_memheap</STRONG> (Thumb, 158 bytes, Stack size 96 bytes, cmd.o(i.list_memheap))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = list_memheap &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[108]"></a>list_msgqueue</STRONG> (Thumb, 216 bytes, Stack size 96 bytes, cmd.o(i.list_msgqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_msgqueue &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[106]"></a>list_mutex</STRONG> (Thumb, 170 bytes, Stack size 104 bytes, cmd.o(i.list_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_mutex &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[104]"></a>list_sem</STRONG> (Thumb, 216 bytes, Stack size 96 bytes, cmd.o(i.list_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_sem &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[103]"></a>list_thread</STRONG> (Thumb, 294 bytes, Stack size 248 bytes, cmd.o(i.list_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ps
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[10a]"></a>list_timer</STRONG> (Thumb, 190 bytes, Stack size 96 bytes, cmd.o(i.list_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = list_timer &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[204]"></a>localtime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, time.o(i.localtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = localtime &rArr; localtime_r &rArr; gmtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rtc_time_stamp
</UL>

<P><STRONG><a name="[294]"></a>localtime_r</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, time.o(i.localtime_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = localtime_r &rArr; gmtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[128]"></a>ls</STRONG> (Thumb, 206 bytes, Stack size 88 bytes, dfs_file.o(i.ls))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = ls &rArr; dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ls
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_file.o(FSymTab)
</UL>
<P><STRONG><a name="[295]"></a>$Super$$main</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = $Super$$main &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[a7]"></a>main_thread_entry</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, components.o(i.main_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = main_thread_entry &rArr; $Super$$main &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> components.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[12e]"></a>mkdir</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, dfs_posix.o(i.mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = mkdir &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkdir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(FSymTab)
</UL>
<P><STRONG><a name="[12c]"></a>mkfs</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dfs_fs.o(i.mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = mkfs &rArr; dfs_mkfs &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_fs.o(FSymTab)
</UL>
<P><STRONG><a name="[224]"></a>mktime</STRONG> (Thumb, 366 bytes, Stack size 20 bytes, time.o(i.mktime))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mktime
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__isleap
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtc_timestamp
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
</UL>

<P><STRONG><a name="[2a1]"></a>mmc_send_op_cond</STRONG> (Thumb, 152 bytes, Stack size 72 bytes, mmc.o(i.mmc_send_op_cond))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = mmc_send_op_cond &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_delay_ms
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[2a3]"></a>mmcsd_all_get_cid</STRONG> (Thumb, 64 bytes, Stack size 64 bytes, mmcsd_core.o(i.mmcsd_all_get_cid))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = mmcsd_all_get_cid &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
</UL>

<P><STRONG><a name="[2a6]"></a>mmcsd_app_set_bus_width</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, sd.o(i.mmcsd_app_set_bus_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = mmcsd_app_set_bus_width &rArr; mmcsd_send_app_cmd &rArr; mmcsd_app_cmd &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_cmd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
</UL>

<P><STRONG><a name="[b9]"></a>mmcsd_detect</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, mmcsd_core.o(i.mmcsd_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = mmcsd_detect &rArr; init_mmc &rArr; mmcsd_mmc_init_card &rArr; mmc_select_bus_width &rArr; mmc_compare_ext_csds &rArr; mmc_get_ext_csd &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_unlock
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_lock
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_remove
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_op_cond
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_power_up
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_power_off
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_if_cond
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_op_cond
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_send_op_cond
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdio
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmcsd_core.o(i.rt_mmcsd_core_init)
</UL>
<P><STRONG><a name="[2b1]"></a>mmcsd_get_card_addr</STRONG> (Thumb, 60 bytes, Stack size 64 bytes, sd.o(i.mmcsd_get_card_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = mmcsd_get_card_addr &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[2b2]"></a>mmcsd_get_cid</STRONG> (Thumb, 262 bytes, Stack size 120 bytes, mmcsd_core.o(i.mmcsd_get_cid))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = mmcsd_get_cid &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
</UL>

<P><STRONG><a name="[2b3]"></a>mmcsd_get_csd</STRONG> (Thumb, 254 bytes, Stack size 120 bytes, mmcsd_core.o(i.mmcsd_get_csd))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = mmcsd_get_csd &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
</UL>

<P><STRONG><a name="[2b4]"></a>mmcsd_get_scr</STRONG> (Thumb, 190 bytes, Stack size 112 bytes, sd.o(i.mmcsd_get_scr))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = mmcsd_get_scr &rArr; mmcsd_app_cmd &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_data_timeout
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_app_cmd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
</UL>

<P><STRONG><a name="[287]"></a>mmcsd_go_idle</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, mmcsd_core.o(i.mmcsd_go_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = mmcsd_go_idle &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_chip_select
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_delay_ms
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
</UL>

<P><STRONG><a name="[284]"></a>mmcsd_host_lock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mmcsd_core.o(i.mmcsd_host_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = mmcsd_host_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_blksize
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
</UL>

<P><STRONG><a name="[282]"></a>mmcsd_host_unlock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mmcsd_core.o(i.mmcsd_host_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = mmcsd_host_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_blksize
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
</UL>

<P><STRONG><a name="[2ba]"></a>mmcsd_select_card</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mmcsd_core.o(i.mmcsd_select_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = mmcsd_select_card &rArr; _mmcsd_select_card &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmcsd_select_card
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[280]"></a>mmcsd_select_voltage</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mmcsd_core.o(i.mmcsd_select_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = mmcsd_select_voltage &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_iocfg
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdio
</UL>

<P><STRONG><a name="[2a7]"></a>mmcsd_send_app_cmd</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, sd.o(i.mmcsd_send_app_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = mmcsd_send_app_cmd &rArr; mmcsd_app_cmd &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_app_cmd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_op_cond
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_app_set_bus_width
</UL>

<P><STRONG><a name="[2af]"></a>mmcsd_send_app_op_cond</STRONG> (Thumb, 176 bytes, Stack size 72 bytes, sd.o(i.mmcsd_send_app_op_cond))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = mmcsd_send_app_op_cond &rArr; mmcsd_send_app_cmd &rArr; mmcsd_app_cmd &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_cmd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
</UL>

<P><STRONG><a name="[1ba]"></a>mmcsd_send_cmd</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, mmcsd_core.o(i.mmcsd_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_blksize
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_switch
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_card_addr
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_op_cond
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmcsd_select_card
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_read_ocr
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_all_get_cid
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_if_cond
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_app_cmd
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_use_crc
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_card_addr
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_send_op_cond
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_direct
</UL>

<P><STRONG><a name="[2ac]"></a>mmcsd_send_if_cond</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, sd.o(i.mmcsd_send_if_cond))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = mmcsd_send_if_cond &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
</UL>

<P><STRONG><a name="[29b]"></a>mmcsd_send_request</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, mmcsd_core.o(i.mmcsd_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_get_ext_csd
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_cmd
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_scr
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_switch
</UL>

<P><STRONG><a name="[2b8]"></a>mmcsd_set_bus_mode</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mmcsd_core.o(i.mmcsd_set_bus_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmcsd_set_bus_mode &rArr; mmcsd_set_iocfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_iocfg
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[29f]"></a>mmcsd_set_bus_width</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mmcsd_core.o(i.mmcsd_set_bus_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmcsd_set_bus_width &rArr; mmcsd_set_iocfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_iocfg
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_bus_width
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_bus_wide
</UL>

<P><STRONG><a name="[2b6]"></a>mmcsd_set_chip_select</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mmcsd_core.o(i.mmcsd_set_chip_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmcsd_set_chip_select &rArr; mmcsd_set_iocfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_iocfg
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
</UL>

<P><STRONG><a name="[2bb]"></a>mmcsd_set_clock</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mmcsd_core.o(i.mmcsd_set_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = mmcsd_set_clock &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_iocfg
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[2b5]"></a>mmcsd_set_data_timeout</STRONG> (Thumb, 194 bytes, Stack size 20 bytes, mmcsd_core.o(i.mmcsd_set_data_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mmcsd_set_data_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_scr
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_switch
</UL>

<P><STRONG><a name="[27f]"></a>mmcsd_spi_read_ocr</STRONG> (Thumb, 62 bytes, Stack size 64 bytes, mmcsd_core.o(i.mmcsd_spi_read_ocr))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = mmcsd_spi_read_ocr &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
</UL>

<P><STRONG><a name="[2b7]"></a>mmcsd_spi_use_crc</STRONG> (Thumb, 50 bytes, Stack size 64 bytes, mmcsd_core.o(i.mmcsd_spi_use_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = mmcsd_spi_use_crc &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[2c3]"></a>msh_auto_complete</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, msh.o(i.msh_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = msh_auto_complete &rArr; msh_auto_complete_path &rArr; opendir &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[2c4]"></a>msh_auto_complete_path</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, msh.o(i.msh_auto_complete_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = msh_auto_complete_path &rArr; opendir &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[270]"></a>msh_exec</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, msh.o(i.msh_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = msh_exec &rArr; msh_exec_script &rArr;  msh_exec (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[2c7]"></a>msh_exec_script</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, msh_file.o(i.msh_exec_script))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + In Cycle
<LI>Call Chain = msh_exec_script &rArr;  msh_exec (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_readline
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>

<P><STRONG><a name="[10d]"></a>msh_help</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, msh.o(i.msh_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[25c]"></a>msh_is_used</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msh.o(i.msh_is_used))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[1ee]"></a>open</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, dfs_posix.o(i.open))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = open &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_stdio_set_console
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
</UL>

<P><STRONG><a name="[1e2]"></a>opendir</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, dfs_posix.o(i.opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = opendir &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
</UL>

<P><STRONG><a name="[2ca]"></a>read</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dfs_posix.o(i.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = read &rArr; fd_put &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_readline
</UL>

<P><STRONG><a name="[241]"></a>readdir</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, dfs_posix.o(i.readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = readdir &rArr; fd_put &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
</UL>

<P><STRONG><a name="[1f5]"></a>rename</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_posix.o(i.rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = rename &rArr; dfs_file_rename &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
</UL>

<P><STRONG><a name="[2c6]"></a>rewinddir</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dfs_posix.o(i.rewinddir))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rewinddir &rArr; fd_put &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
</UL>

<P><STRONG><a name="[129]"></a>rm</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dfs_file.o(i.rm))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = rm &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_file.o(FSymTab)
</UL>
<P><STRONG><a name="[2d4]"></a>rt_application_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, components.o(i.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1bc]"></a>rt_assert_handler</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, kservice.o(i.rt_assert_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_partition
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_transfer_message
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_configure
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_spi_port_init
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_delete
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_unlock
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lock
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_read
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_control
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_read
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_write
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_read
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_write
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_read
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_configure
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_bus_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_register
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_core_init
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_send_op_cond
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_direct
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdio
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_qspi_register_bus
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_qspi_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspixfer
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_send_cmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_configure
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_putc
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_getc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_dma_transmit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_configure
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_write
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_read
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_ioctl
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_getdents
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_close
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_qspi_bus_attach_device
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_send_then_recv
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_send
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_device_attach
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_get
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_write
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_read
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_control
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_rx
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt_mode
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_ioctl
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
</UL>

<P><STRONG><a name="[257]"></a>rt_calloc</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, memheap.o(i.rt_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_calloc &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_alloc
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[2d5]"></a>rt_completion_done</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, completion.o(i.rt_completion_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[2d9]"></a>rt_completion_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, completion.o(i.rt_completion_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_completion_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[1cc]"></a>rt_completion_wait</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, completion.o(i.rt_completion_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_completion_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
</UL>

<P><STRONG><a name="[2f0]"></a>rt_components_board_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[297]"></a>rt_components_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[26a]"></a>rt_console_get_device</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kservice.o(i.rt_console_get_device))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libc_system_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[2df]"></a>rt_console_set_device</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, kservice.o(i.rt_console_set_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_console_set_device &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[209]"></a>rt_device_close</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, device.o(i.rt_device_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_device_close &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_close
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[20b]"></a>rt_device_control</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, device.o(i.rt_device_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_ioctl
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[20f]"></a>rt_device_find</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, device.o(i.rt_device_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_lcd
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_stat
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</UL>

<P><STRONG><a name="[210]"></a>rt_device_open</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, device.o(i.rt_device_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = rt_device_open &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[2e2]"></a>rt_device_pin_register</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pin.o(i.rt_device_pin_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pin_init
</UL>

<P><STRONG><a name="[211]"></a>rt_device_read</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, device.o(i.rt_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_device_read &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_read
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[2e3]"></a>rt_device_register</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, device.o(i.rt_device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_register
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
</UL>

<P><STRONG><a name="[264]"></a>rt_device_set_rx_indicate</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, device.o(i.rt_device_set_rx_indicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_device_set_rx_indicate &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</UL>

<P><STRONG><a name="[2e5]"></a>rt_device_unregister</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, device.o(i.rt_device_unregister))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_device_unregister &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_remove
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_delete
</UL>

<P><STRONG><a name="[212]"></a>rt_device_write</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, device.o(i.rt_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_write
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[20c]"></a>rt_enter_critical</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler.o(i.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>

<P><STRONG><a name="[20e]"></a>rt_exit_critical</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, scheduler.o(i.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>

<P><STRONG><a name="[1e3]"></a>rt_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, memheap.o(i.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_remove
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_delete
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_compare_ext_csds
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_switch
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_free_cis
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdio
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_close
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_qspi_bus_attach_device
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
</UL>

<P><STRONG><a name="[2e9]"></a>rt_hw_board_init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, drv_common.o(i.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rt_hw_board_init &rArr; SystemClock_Config &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pin_init
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_systick_init
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableICache
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCB_EnableDCache
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[30a]"></a>rt_hw_console_output</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kservice.o(i.rt_hw_console_output))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[2d2]"></a>rt_hw_cpu_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpuport.o(i.rt_hw_cpu_reset))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
</UL>

<P><STRONG><a name="[132]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, cpuport.o(i.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = rt_hw_hard_fault_exception &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[2ee]"></a>rt_hw_pin_init</STRONG> (Thumb, 302 bytes, Stack size 8 bytes, drv_gpio.o(i.rt_hw_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_hw_pin_init &rArr; rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[f9]"></a>rt_hw_rtc_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, drv_rtc.o(i.rt_hw_rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = rt_hw_rtc_init &rArr; rt_hw_rtc_register &rArr; rt_rtc_config &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rtc.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[2f5]"></a>rt_hw_serial_isr</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, serial.o(i.rt_hw_serial_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_check_buffer_size
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[2f6]"></a>rt_hw_serial_register</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, serial.o(i.rt_hw_serial_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>

<P><STRONG><a name="[2f9]"></a>rt_hw_spi_device_attach</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, drv_spi.o(i.rt_hw_spi_device_attach))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = rt_hw_spi_device_attach &rArr; rt_spi_bus_attach_device &rArr; rt_spidev_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_flash_with_sfud_init
</UL>

<P><STRONG><a name="[f3]"></a>rt_hw_spi_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_spi.o(i.rt_hw_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_hw_spi_init &rArr; rt_hw_spi_bus_init &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_get_dma_info
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_bus_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[1c2]"></a>rt_hw_stack_init</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, cpuport.o(i.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[2ec]"></a>rt_hw_systick_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, drv_common.o(i.rt_hw_systick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_hw_systick_init &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD1SysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[2ef]"></a>rt_hw_usart_init</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, drv_usart.o(i.rt_hw_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_hw_usart_init &rArr; rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_uart_get_dma_config
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[142]"></a>rt_interrupt_enter</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[2dc]"></a>rt_interrupt_get_nest</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, irq.o(i.rt_interrupt_get_nest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>

<P><STRONG><a name="[144]"></a>rt_interrupt_leave</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[198]"></a>rt_kprintf</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, kservice.o(i.rt_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_lcd
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_partition
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_blksize
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_date
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spixfer
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_init
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_config
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_parse_csd
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_bus_width
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_parse_ext_csd
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_get_ext_csd
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_switch
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_parse_csd
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_clock
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_voltage
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdio
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_register_card
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cccr
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_test
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_t
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Init
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_qspi_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspixfer
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_fd
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_header
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_table
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_header
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_4_byte_address_mode
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_jedec_id
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_qspi_bus_attach_device
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_device_attach
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_enter_qspi_mode
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_flash_with_sfud_init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hello
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage_fault_track
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_manage_fault_track
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_fault_track
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_check_buffer_size
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_pwd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkfs
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mkdir
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_df
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cp
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cat
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[1f1]"></a>rt_malloc</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, memheap.o(i.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_get_ext_csd
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_switch
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_register_card
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_qspi_bus_attach_device
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_device_attach
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[30c]"></a>rt_mb_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ipc.o(i.rt_mb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_mb_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_core_init
</UL>

<P><STRONG><a name="[2aa]"></a>rt_mb_recv</STRONG> (Thumb, 430 bytes, Stack size 48 bytes, ipc.o(i.rt_mb_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_mb_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[2b0]"></a>rt_mb_send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ipc.o(i.rt_mb_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[30d]"></a>rt_mb_send_wait</STRONG> (Thumb, 414 bytes, Stack size 48 bytes, ipc.o(i.rt_mb_send_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_mb_send_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>

<P><STRONG><a name="[2a4]"></a>rt_memcpy</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, kservice.o(i.rt_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_control
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_all_get_cid
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
</UL>

<P><STRONG><a name="[30b]"></a>rt_memheap_alloc</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, memheap.o(i.rt_memheap_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
</UL>

<P><STRONG><a name="[2e8]"></a>rt_memheap_free</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, memheap.o(i.rt_memheap_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
</UL>

<P><STRONG><a name="[19a]"></a>rt_memheap_init</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, memheap.o(i.rt_memheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_memheap_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Init
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>

<P><STRONG><a name="[30e]"></a>rt_memheap_realloc</STRONG> (Thumb, 554 bytes, Stack size 48 bytes, memheap.o(i.rt_memheap_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
</UL>

<P><STRONG><a name="[26e]"></a>rt_memmove</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, kservice.o(i.rt_memmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[1b9]"></a>rt_memset</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, kservice.o(i.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_card_addr
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_get_ext_csd
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_op_cond
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmcsd_select_card
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_read_ocr
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_all_get_cid
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_op_cond
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_cmd
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_scr
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_app_set_bus_width
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_switch
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_use_crc
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_card_addr
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_send_op_cond
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_direct
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cccr
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_qspi_init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[283]"></a>rt_mmcsd_blk_probe</STRONG> (Thumb, 478 bytes, Stack size 48 bytes, block_dev.o(i.rt_mmcsd_blk_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = rt_mmcsd_blk_probe &rArr; rt_mmcsd_req_blk &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_partition
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_blksize
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
</UL>

<P><STRONG><a name="[285]"></a>rt_mmcsd_blk_remove</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, block_dev.o(i.rt_mmcsd_blk_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = rt_mmcsd_blk_remove &rArr; dfs_unmount &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_mounted_path
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
</UL>

<P><STRONG><a name="[f7]"></a>rt_mmcsd_core_init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, mmcsd_core.o(i.rt_mmcsd_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = rt_mmcsd_core_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sdio_init
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmcsd_core.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[315]"></a>rt_mutex_detach</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ipc.o(i.rt_mutex_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_mutex_detach &rArr; rt_ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_delete
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
</UL>

<P><STRONG><a name="[231]"></a>rt_mutex_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ipc.o(i.rt_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_mutex_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
</UL>

<P><STRONG><a name="[234]"></a>rt_mutex_release</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, ipc.o(i.rt_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_unlock
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_transfer_message
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_unlock
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
</UL>

<P><STRONG><a name="[233]"></a>rt_mutex_take</STRONG> (Thumb, 404 bytes, Stack size 32 bytes, ipc.o(i.rt_mutex_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_lock
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_transfer_message
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lock
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>

<P><STRONG><a name="[317]"></a>rt_object_allocate</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, object.o(i.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
</UL>

<P><STRONG><a name="[319]"></a>rt_object_delete</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, object.o(i.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
</UL>

<P><STRONG><a name="[2e7]"></a>rt_object_detach</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, object.o(i.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
</UL>

<P><STRONG><a name="[2e1]"></a>rt_object_find</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, object.o(i.rt_object_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>

<P><STRONG><a name="[20d]"></a>rt_object_get_information</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, object.o(i.rt_object_get_information))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_open
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>

<P><STRONG><a name="[2e0]"></a>rt_object_get_type</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, object.o(i.rt_object_get_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
</UL>

<P><STRONG><a name="[2e4]"></a>rt_object_init</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, object.o(i.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_init
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[2e6]"></a>rt_object_is_systemobject</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, object.o(i.rt_object_is_systemobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
</UL>

<P><STRONG><a name="[11e]"></a>rt_pin_get</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, pin.o(i.rt_pin_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_pin_get &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(FSymTab)
</UL>
<P><STRONG><a name="[11b]"></a>rt_pin_mode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pin.o(i.rt_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_pin_mode &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(FSymTab)
</UL>
<P><STRONG><a name="[11d]"></a>rt_pin_read</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pin.o(i.rt_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(FSymTab)
</UL>
<P><STRONG><a name="[11c]"></a>rt_pin_write</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pin.o(i.rt_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(FSymTab)
</UL>
<P><STRONG><a name="[31c]"></a>rt_qspi_bus_register</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, qspi_core.o(i.rt_qspi_bus_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_qspi_bus_register &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_qspi_register_bus
</UL>

<P><STRONG><a name="[31d]"></a>rt_qspi_configure</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, qspi_core.o(i.rt_qspi_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_qspi_configure &rArr; rt_spi_configure &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
</UL>

<P><STRONG><a name="[31f]"></a>rt_qspi_send</STRONG> (Thumb, 260 bytes, Stack size 80 bytes, qspi_core.o(i.rt_qspi_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = rt_qspi_send &rArr; rt_qspi_transfer_message &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_transfer_message
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_enable
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_enter_qspi_mode
</UL>

<P><STRONG><a name="[320]"></a>rt_qspi_send_then_recv</STRONG> (Thumb, 284 bytes, Stack size 88 bytes, qspi_core.o(i.rt_qspi_send_then_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = rt_qspi_send_then_recv &rArr; rt_qspi_transfer_message &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_transfer_message
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_status_register2
</UL>

<P><STRONG><a name="[2cc]"></a>rt_qspi_transfer_message</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, qspi_core.o(i.rt_qspi_transfer_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_qspi_transfer_message &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_read
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_send_then_recv
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_send
</UL>

<P><STRONG><a name="[256]"></a>rt_realloc</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, memheap.o(i.rt_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_alloc
</UL>

<P><STRONG><a name="[2d8]"></a>rt_schedule</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, scheduler.o(i.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_highest_priority_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[323]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_schedule_insert_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[324]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_schedule_remove_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
</UL>

<P><STRONG><a name="[314]"></a>rt_sdio_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sdio.o(i.rt_sdio_init))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_core_init
</UL>

<P><STRONG><a name="[310]"></a>rt_sem_create</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
</UL>

<P><STRONG><a name="[312]"></a>rt_sem_delete</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ipc.o(i.rt_sem_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_sem_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_remove
</UL>

<P><STRONG><a name="[268]"></a>rt_sem_init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[262]"></a>rt_sem_release</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ipc.o(i.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_write
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_read
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
</UL>

<P><STRONG><a name="[261]"></a>rt_sem_take</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, ipc.o(i.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_write
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_read
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
</UL>

<P><STRONG><a name="[1e0]"></a>rt_set_errno</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kservice.o(i.rt_set_errno))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_write
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_read
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_transfer_message
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_realloc
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_free
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_alloc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>

<P><STRONG><a name="[328]"></a>rt_sfud_flash_delete</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, spi_flash_sfud.o(i.rt_sfud_flash_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_sfud_flash_delete &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
</UL>

<P><STRONG><a name="[2fe]"></a>rt_sfud_flash_probe</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, spi_flash_sfud.o(i.rt_sfud_flash_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = rt_sfud_flash_probe &rArr; rt_sfud_flash_probe_ex &rArr; rt_qspi_configure &rArr; rt_spi_configure &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_flash_with_sfud_init
</UL>

<P><STRONG><a name="[2fc]"></a>rt_sfud_flash_probe_ex</STRONG> (Thumb, 556 bytes, Stack size 56 bytes, spi_flash_sfud.o(i.rt_sfud_flash_probe_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = rt_sfud_flash_probe_ex &rArr; rt_qspi_configure &rArr; rt_spi_configure &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_qspi_fast_read_enable
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_configure
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_flash_with_sfud_init
</UL>

<P><STRONG><a name="[32d]"></a>rt_show_version</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, kservice.o(i.rt_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version
</UL>

<P><STRONG><a name="[1f3]"></a>rt_snprintf</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, kservice.o(i.rt_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = rt_snprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
</UL>

<P><STRONG><a name="[2fb]"></a>rt_spi_bus_attach_device</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, spi_core.o(i.rt_spi_bus_attach_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_spi_bus_attach_device &rArr; rt_spidev_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_qspi_bus_attach_device
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_device_attach
</UL>

<P><STRONG><a name="[32f]"></a>rt_spi_bus_device_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi_dev.o(i.rt_spi_bus_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
</UL>

<P><STRONG><a name="[2f8]"></a>rt_spi_bus_register</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_core.o(i.rt_spi_bus_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_bus_register
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_bus_init
</UL>

<P><STRONG><a name="[31e]"></a>rt_spi_configure</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, spi_core.o(i.rt_spi_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_spi_configure &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_configure
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
</UL>

<P><STRONG><a name="[330]"></a>rt_spi_send_then_recv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, spi_core.o(i.rt_spi_send_then_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
</UL>

<P><STRONG><a name="[1cf]"></a>rt_spi_transfer</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, spi_core.o(i.rt_spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_write
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_read
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_write
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_read
</UL>

<P><STRONG><a name="[32e]"></a>rt_spidev_device_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi_dev.o(i.rt_spidev_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_spidev_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
</UL>

<P><STRONG><a name="[243]"></a>rt_sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, kservice.o(i.rt_sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
</UL>

<P><STRONG><a name="[242]"></a>rt_strcmp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, kservice.o(i.rt_strcmp))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
</UL>

<P><STRONG><a name="[22a]"></a>rt_strdup</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, kservice.o(i.rt_strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
</UL>

<P><STRONG><a name="[37b]"></a>strdup</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, kservice.o(i.rt_strdup), UNUSED)

<P><STRONG><a name="[1f2]"></a>rt_strlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, kservice.o(i.rt_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_get
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
</UL>

<P><STRONG><a name="[31b]"></a>rt_strncmp</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, kservice.o(i.rt_strncmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>

<P><STRONG><a name="[20a]"></a>rt_strncpy</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, kservice.o(i.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_device_fs_getdents
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
</UL>

<P><STRONG><a name="[2ed]"></a>rt_system_heap_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, memheap.o(i.rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_system_heap_init &rArr; rt_memheap_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[332]"></a>rt_system_scheduler_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, scheduler.o(i.rt_system_scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_scheduler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[334]"></a>rt_system_scheduler_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, scheduler.o(i.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_system_scheduler_start &rArr; rt_schedule_remove_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_highest_priority_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[336]"></a>rt_system_timer_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(i.rt_system_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[346]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(i.rt_system_timer_thread_init))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[316]"></a>rt_thread_control</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, thread.o(i.rt_thread_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>

<P><STRONG><a name="[267]"></a>rt_thread_create</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, thread.o(i.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[2a9]"></a>rt_thread_delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, thread.o(i.rt_thread_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_delay_100us
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_delay_ms
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_delay_ms
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_op_cond
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_send_op_cond
</UL>

<P><STRONG><a name="[338]"></a>rt_thread_delete</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, thread.o(i.rt_thread_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_thread_delete &rArr; rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[337]"></a>rt_thread_detach</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, thread.o(i.rt_thread_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_thread_detach &rArr; rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[a3]"></a>rt_thread_exit</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, thread.o(i.rt_thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_thread_exit &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[33c]"></a>rt_thread_idle_excute</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, idle.o(i.rt_thread_idle_excute))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[33d]"></a>rt_thread_idle_init</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, idle.o(i.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[313]"></a>rt_thread_init</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, thread.o(i.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_core_init
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
</UL>

<P><STRONG><a name="[296]"></a>rt_thread_mdelay</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, thread.o(i.rt_thread_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_enter_qspi_mode
</UL>

<P><STRONG><a name="[2d7]"></a>rt_thread_resume</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, thread.o(i.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[2da]"></a>rt_thread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(i.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>

<P><STRONG><a name="[339]"></a>rt_thread_sleep</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, thread.o(i.rt_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>

<P><STRONG><a name="[269]"></a>rt_thread_startup</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, thread.o(i.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_core_init
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[2db]"></a>rt_thread_suspend</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, thread.o(i.rt_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>

<P><STRONG><a name="[a4]"></a>rt_thread_timeout</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, thread.o(i.rt_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[33e]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, clock.o(i.rt_tick_from_millisecond))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[152]"></a>rt_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(i.rt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_test
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
</UL>

<P><STRONG><a name="[1a4]"></a>rt_tick_increase</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, clock.o(i.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_tick_increase &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[341]"></a>rt_timer_check</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, timer.o(i.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[2dd]"></a>rt_timer_control</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, timer.o(i.rt_timer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_timer_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>

<P><STRONG><a name="[33a]"></a>rt_timer_detach</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, timer.o(i.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
</UL>

<P><STRONG><a name="[1c3]"></a>rt_timer_init</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, timer.o(i.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[2de]"></a>rt_timer_start</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, timer.o(i.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_timer_start &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>

<P><STRONG><a name="[340]"></a>rt_timer_stop</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, timer.o(i.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[309]"></a>rt_vsnprintf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, kservice.o(i.rt_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
</UL>

<P><STRONG><a name="[331]"></a>rt_vsprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, kservice.o(i.rt_vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>

<P><STRONG><a name="[141]"></a>rtthread_startup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, components.o(i.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = rtthread_startup &rArr; rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[347]"></a>sdio_free_cis</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, sdio.o(i.sdio_free_cis))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = sdio_free_cis &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[34f]"></a>sdio_io_readb</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, sdio.o(i.sdio_io_readb))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = sdio_io_readb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_highspeed
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_bus_wide
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_fbr
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cccr
</UL>

<P><STRONG><a name="[350]"></a>sdio_io_rw_direct</STRONG> (Thumb, 262 bytes, Stack size 80 bytes, sdio.o(i.sdio_io_rw_direct))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_writeb
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readb
</UL>

<P><STRONG><a name="[2ad]"></a>sdio_io_send_op_cond</STRONG> (Thumb, 172 bytes, Stack size 72 bytes, sdio.o(i.sdio_io_send_op_cond))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = sdio_io_send_op_cond &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[351]"></a>sdio_io_writeb</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, sdio.o(i.sdio_io_writeb))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = sdio_io_writeb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_highspeed
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_bus_wide
</UL>

<P><STRONG><a name="[125]"></a>sdram_test</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, drv_sdram.o(i.sdram_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = sdram_test &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sdram.o(FSymTab)
</UL>
<P><STRONG><a name="[120]"></a>set_date</STRONG> (Thumb, 104 bytes, Stack size 80 bytes, rtc.o(i.set_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = set_date &rArr; time &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(FSymTab)
</UL>
<P><STRONG><a name="[121]"></a>set_time</STRONG> (Thumb, 98 bytes, Stack size 80 bytes, rtc.o(i.set_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = set_time &rArr; time &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(FSymTab)
</UL>
<P><STRONG><a name="[35b]"></a>sfud_chip_erase</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, sfud.o(i.sfud_chip_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = sfud_chip_erase &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>

<P><STRONG><a name="[329]"></a>sfud_device_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, sfud.o(i.sfud_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = sfud_device_init &rArr; hardware_init &rArr; sfud_read_sfdp &rArr; read_basic_table &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_init
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
</UL>

<P><STRONG><a name="[327]"></a>sfud_erase</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, sfud.o(i.sfud_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = sfud_erase &rArr; sfud_chip_erase &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_sfdp_get_suitable_eraser
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_adress_byte_array
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase_write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_control
</UL>

<P><STRONG><a name="[32c]"></a>sfud_erase_write</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sfud.o(i.sfud_erase_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = sfud_erase_write &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_write
</UL>

<P><STRONG><a name="[32a]"></a>sfud_qspi_fast_read_enable</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, sfud.o(i.sfud_qspi_fast_read_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = sfud_qspi_fast_read_enable &rArr; qspi_set_read_cmd_format
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_set_read_cmd_format
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
</UL>

<P><STRONG><a name="[32b]"></a>sfud_read</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, sfud.o(i.sfud_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = sfud_read &rArr; wait_busy &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_adress_byte_array
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_read
</UL>

<P><STRONG><a name="[27a]"></a>sfud_read_sfdp</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sfud_sfdp.o(i.sfud_read_sfdp))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = sfud_read_sfdp &rArr; read_basic_table &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_header
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_table
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_header
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[358]"></a>sfud_read_status</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, sfud.o(i.sfud_read_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sfud_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
</UL>

<P><STRONG><a name="[35d]"></a>sfud_sfdp_get_suitable_eraser</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, sfud_sfdp.o(i.sfud_sfdp_get_suitable_eraser))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sfud_sfdp_get_suitable_eraser
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>

<P><STRONG><a name="[278]"></a>sfud_spi_port_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, spi_flash_sfud.o(i.sfud_spi_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sfud_spi_port_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[359]"></a>sfud_write</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, sfud.o(i.sfud_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase_write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
</UL>

<P><STRONG><a name="[27c]"></a>sfud_write_status</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, sfud.o(i.sfud_write_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = sfud_write_status &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[1f6]"></a>stat</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_posix.o(i.stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = stat &rArr; dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
</UL>

<P><STRONG><a name="[2fd]"></a>stm32_qspi_bus_attach_device</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, drv_qspi.o(i.stm32_qspi_bus_attach_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = stm32_qspi_bus_attach_device &rArr; rt_spi_bus_attach_device &rArr; rt_spidev_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_flash_with_sfud_init
</UL>

<P><STRONG><a name="[205]"></a>time</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, time.o(i.time))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = time &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_date
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
</UL>

<P><STRONG><a name="[1f4]"></a>unlink</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dfs_posix.o(i.unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = unlink &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mv
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
</UL>

<P><STRONG><a name="[102]"></a>version</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.version))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = version &rArr; rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[b2]"></a>w25qxx_enter_qspi_mode</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, w25qxx_driver_for_rtt.o(i.w25qxx_enter_qspi_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = w25qxx_enter_qspi_mode &rArr; w25qxx_read_status_register2 &rArr; rt_qspi_send_then_recv &rArr; rt_qspi_transfer_message &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_send
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_write_enable
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_read_status_register2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w25qxx_driver_for_rtt.o(i.rt_hw_spi_flash_with_sfud_init)
</UL>
<P><STRONG><a name="[364]"></a>w25qxx_read_status_register2</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, w25qxx_driver_for_rtt.o(i.w25qxx_read_status_register2))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = w25qxx_read_status_register2 &rArr; rt_qspi_send_then_recv &rArr; rt_qspi_transfer_message &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_send_then_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_enter_qspi_mode
</UL>

<P><STRONG><a name="[365]"></a>w25qxx_write_enable</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, w25qxx_driver_for_rtt.o(i.w25qxx_write_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = w25qxx_write_enable &rArr; rt_qspi_send &rArr; rt_qspi_transfer_message &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_send
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_enter_qspi_mode
</UL>

<P><STRONG><a name="[1ef]"></a>write</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dfs_posix.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = write &rArr; fd_put &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_write
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_echo
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ff]"></a>my_lcd</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, main.o(i.my_lcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = my_lcd &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(FSymTab)
</UL>
<P><STRONG><a name="[1a7]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_conf.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[159]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[15a]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[148]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[149]"></a>DMA_CalcDMAMUXChannelBaseAndMask</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, stm32h7xx_hal_dma.o(i.DMA_CalcDMAMUXChannelBaseAndMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CalcDMAMUXChannelBaseAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[14a]"></a>DMA_CalcDMAMUXRequestGenBaseAndMask</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(i.DMA_CalcDMAMUXRequestGenBaseAndMask))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[147]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[14c]"></a>DMA_SetConfig</STRONG> (Thumb, 614 bytes, Stack size 20 bytes, stm32h7xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[15e]"></a>QSPI_Config</STRONG> (Thumb, 488 bytes, Stack size 8 bytes, stm32h7xx_hal_qspi.o(i.QSPI_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QSPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>

<P><STRONG><a name="[15d]"></a>QSPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stm32h7xx_hal_qspi.o(i.QSPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
</UL>

<P><STRONG><a name="[168]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(i.RCCEx_PLL2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCCEx_PLL2_Config &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[169]"></a>RCCEx_PLL3_Config</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(i.RCCEx_PLL3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCCEx_PLL3_Config &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[187]"></a>SPI_CloseTransfer</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, stm32h7xx_hal_spi.o(i.SPI_CloseTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAError
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[9a]"></a>SPI_DMAError</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32h7xx_hal_spi.o(i.SPI_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 3]<UL><LI> stm32h7xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
<LI> stm32h7xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
<LI> stm32h7xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[98]"></a>SPI_DMAHalfReceiveCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32h7xx_hal_spi.o(i.SPI_DMAHalfReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAHalfReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32h7xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
<LI> stm32h7xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[9d]"></a>SPI_DMAHalfTransmitCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32h7xx_hal_spi.o(i.SPI_DMAHalfTransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAHalfTransmitCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[9b]"></a>SPI_DMAHalfTransmitReceiveCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32h7xx_hal_spi.o(i.SPI_DMAHalfTransmitReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAHalfTransmitReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[99]"></a>SPI_DMAReceiveCplt</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32h7xx_hal_spi.o(i.SPI_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMAReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32h7xx_hal_spi.o(i.HAL_SPI_Receive_DMA)
<LI> stm32h7xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[9e]"></a>SPI_DMATransmitCplt</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32h7xx_hal_spi.o(i.SPI_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMATransmitCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[9c]"></a>SPI_DMATransmitReceiveCplt</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32h7xx_hal_spi.o(i.SPI_DMATransmitReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DMATransmitReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_spi.o(i.HAL_SPI_TransmitReceive_DMA)
</UL>
<P><STRONG><a name="[183]"></a>SPI_GetPacketSize</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32h7xx_hal_spi.o(i.SPI_GetPacketSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_GetPacketSize
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[18b]"></a>SPI_WaitOnFlagUntilTimeout</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, stm32h7xx_hal_spi.o(i.SPI_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitOnFlagUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[a1]"></a>UART_DMAError</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(i.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[9f]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(i.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATransmitCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[a0]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(i.UART_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[1ac]"></a>UART_EndRxTransfer</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[1ab]"></a>UART_EndTxTransfer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.UART_EndTxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[fa]"></a>rt_hw_spi_flash_with_sfud_init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, w25qxx_driver_for_rtt.o(i.rt_hw_spi_flash_with_sfud_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = rt_hw_spi_flash_with_sfud_init &rArr; rt_sfud_flash_probe &rArr; rt_sfud_flash_probe_ex &rArr; rt_qspi_configure &rArr; rt_spi_configure &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_qspi_bus_attach_device
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_device_attach
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w25qxx_driver_for_rtt.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[f6]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[f2]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[fe]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[f1]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[c3]"></a>rt_thread_idle_entry</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, idle.o(i.rt_thread_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_thread_idle_entry &rArr; rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(i.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[302]"></a>rt_ipc_list_resume</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ipc.o(i.rt_ipc_list_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>

<P><STRONG><a name="[303]"></a>rt_ipc_list_resume_all</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ipc.o(i.rt_ipc_list_resume_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
</UL>

<P><STRONG><a name="[305]"></a>rt_ipc_list_suspend</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ipc.o(i.rt_ipc_list_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>

<P><STRONG><a name="[307]"></a>rt_ipc_object_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ipc.o(i.rt_ipc_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ipc_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
</UL>

<P><STRONG><a name="[308]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>

<P><STRONG><a name="[306]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[304]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipc.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>

<P><STRONG><a name="[345]"></a>print_number</STRONG> (Thumb, 400 bytes, Stack size 60 bytes, kservice.o(i.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[344]"></a>skip_atoi</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, kservice.o(i.skip_atoi))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[318]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[31a]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[1b4]"></a>_get_highest_priority_thread</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, scheduler.o(i._get_highest_priority_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_highest_priority_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[1bf]"></a>_rt_scheduler_stack_check</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, scheduler.o(i._rt_scheduler_stack_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[333]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
</UL>

<P><STRONG><a name="[1c1]"></a>_rt_thread_init</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, thread.o(i._rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[1d0]"></a>_thread_cleanup_execute</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, thread.o(i._thread_cleanup_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _thread_cleanup_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
</UL>

<P><STRONG><a name="[33b]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, thread.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
</UL>

<P><STRONG><a name="[33f]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[1c4]"></a>_rt_timer_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, timer.o(i._rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _rt_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[1c6]"></a>_rt_timer_remove</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timer.o(i._rt_timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
</UL>

<P><STRONG><a name="[1c5]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>

<P><STRONG><a name="[342]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>

<P><STRONG><a name="[343]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[1c7]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>

<P><STRONG><a name="[1d9]"></a>bus_fault_track</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, cpuport.o(i.bus_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = bus_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[274]"></a>hard_fault_track</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, cpuport.o(i.hard_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = hard_fault_track &rArr; usage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage_fault_track
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_manage_fault_track
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_fault_track
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[275]"></a>mem_manage_fault_track</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, cpuport.o(i.mem_manage_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = mem_manage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[276]"></a>usage_fault_track</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, cpuport.o(i.usage_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = usage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[101]"></a>clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(i.clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = clear &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[28d]"></a>list_find_init</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, cmd.o(i.list_find_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = list_find_init
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[28f]"></a>list_get_next</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, cmd.o(i.list_get_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = list_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[28e]"></a>object_split</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmd.o(i.object_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[290]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmd.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[291]"></a>rt_list_len</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cmd.o(i.rt_list_len))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[292]"></a>show_wait_queue</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cmd.o(i.show_wait_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[1bb]"></a>_msh_exec_cmd</STRONG> (Thumb, 136 bytes, Stack size 72 bytes, msh.o(i._msh_exec_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = _msh_exec_cmd &rArr; msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>

<P><STRONG><a name="[1bd]"></a>msh_get_cmd</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, msh.o(i.msh_get_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = msh_get_cmd &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[1be]"></a>msh_split</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, msh.o(i.msh_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[2c5]"></a>str_common</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, msh.o(i.str_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = str_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete_path
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[260]"></a>finsh_getchar</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, shell.o(i.finsh_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = finsh_getchar &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[a5]"></a>finsh_rx_ind</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, shell.o(i.finsh_rx_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = finsh_rx_ind &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(i.finsh_set_device)
</UL>
<P><STRONG><a name="[26d]"></a>shell_auto_complete</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, shell.o(i.shell_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = shell_auto_complete &rArr; msh_auto_complete &rArr; msh_auto_complete_path &rArr; opendir &rArr; fd_new &rArr; fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_is_used
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[26c]"></a>shell_handle_history</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, shell.o(i.shell_handle_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = shell_handle_history &rArr; finsh_get_prompt &rArr; getcwd &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[26f]"></a>shell_push_history</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, shell.o(i.shell_push_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = shell_push_history &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[1f7]"></a>directory_delete_for_msh</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, msh_file.o(i.directory_delete_for_msh))
<BR><BR>[Stack]<UL><LI>Max Depth = 468 + In Cycle
<LI>Call Chain = directory_delete_for_msh &rArr;  directory_delete_for_msh (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rm
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directory_delete_for_msh
</UL>

<P><STRONG><a name="[2c9]"></a>msh_readline</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, msh_file.o(i.msh_readline))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = msh_readline &rArr; read &rArr; fd_put &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec_script
</UL>

<P><STRONG><a name="[1c8]"></a>_serial_check_buffer_size</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, serial.o(i._serial_check_buffer_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = _serial_check_buffer_size &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[1c9]"></a>_serial_int_rx</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, serial.o(i._serial_int_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _serial_int_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[1cb]"></a>_serial_int_tx</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, serial.o(i._serial_int_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = _serial_int_tx &rArr; rt_completion_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[1cd]"></a>_serial_poll_rx</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, serial.o(i._serial_poll_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _serial_poll_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[1ce]"></a>_serial_poll_tx</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, serial.o(i._serial_poll_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _serial_poll_tx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[ae]"></a>rt_serial_close</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, serial.o(i.rt_serial_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_serial_close &rArr; rt_free &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[b1]"></a>rt_serial_control</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, serial.o(i.rt_serial_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_serial_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[ac]"></a>rt_serial_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, serial.o(i.rt_serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_serial_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[ad]"></a>rt_serial_open</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, serial.o(i.rt_serial_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_serial_open &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[af]"></a>rt_serial_read</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, serial.o(i.rt_serial_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_serial_read &rArr; _serial_int_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_rx
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[b0]"></a>rt_serial_write</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, serial.o(i.rt_serial_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_serial_write &rArr; _serial_int_tx &rArr; rt_completion_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[aa]"></a>_pin_control</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, pin.o(i._pin_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _pin_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(i.rt_device_pin_register)
</UL>
<P><STRONG><a name="[a8]"></a>_pin_read</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, pin.o(i._pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(i.rt_device_pin_register)
</UL>
<P><STRONG><a name="[a9]"></a>_pin_write</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, pin.o(i._pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(i.rt_device_pin_register)
</UL>
<P><STRONG><a name="[2d6]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, completion.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[122]"></a>date</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, rtc.o(i.date))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = date &rArr; set_time &rArr; time &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(FSymTab)
</UL>
<P><STRONG><a name="[bf]"></a>_spi_bus_device_control</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, spi_dev.o(i._spi_bus_device_control))
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(i.rt_spi_bus_device_init)
</UL>
<P><STRONG><a name="[bd]"></a>_spi_bus_device_read</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_dev.o(i._spi_bus_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = _spi_bus_device_read &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(i.rt_spi_bus_device_init)
</UL>
<P><STRONG><a name="[be]"></a>_spi_bus_device_write</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_dev.o(i._spi_bus_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = _spi_bus_device_write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(i.rt_spi_bus_device_init)
</UL>
<P><STRONG><a name="[c2]"></a>_spidev_device_control</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, spi_dev.o(i._spidev_device_control))
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(i.rt_spidev_device_init)
</UL>
<P><STRONG><a name="[c0]"></a>_spidev_device_read</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_dev.o(i._spidev_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = _spidev_device_read &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(i.rt_spidev_device_init)
</UL>
<P><STRONG><a name="[c1]"></a>_spidev_device_write</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_dev.o(i._spidev_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = _spidev_device_write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(i.rt_spidev_device_init)
</UL>
<P><STRONG><a name="[c5]"></a>qspi_read</STRONG> (Thumb, 196 bytes, Stack size 88 bytes, spi_flash_sfud.o(i.qspi_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = qspi_read &rArr; rt_qspi_transfer_message &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_transfer_message
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[c8]"></a>retry_delay_100us</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_flash_sfud.o(i.retry_delay_100us))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = retry_delay_100us &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[bc]"></a>rt_sfud_control</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, spi_flash_sfud.o(i.rt_sfud_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = rt_sfud_control &rArr; sfud_erase &rArr; sfud_chip_erase &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.rt_sfud_flash_probe_ex)
</UL>
<P><STRONG><a name="[ba]"></a>rt_sfud_read</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, spi_flash_sfud.o(i.rt_sfud_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_sfud_read &rArr; sfud_read &rArr; wait_busy &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.rt_sfud_flash_probe_ex)
</UL>
<P><STRONG><a name="[bb]"></a>rt_sfud_write</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, spi_flash_sfud.o(i.rt_sfud_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = rt_sfud_write &rArr; sfud_erase_write &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase_write
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.rt_sfud_flash_probe_ex)
</UL>
<P><STRONG><a name="[123]"></a>sf</STRONG> (Thumb, 2014 bytes, Stack size 96 bytes, spi_flash_sfud.o(i.sf))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = sf &rArr; rt_sfud_flash_probe &rArr; rt_sfud_flash_probe_ex &rArr; rt_qspi_configure &rArr; rt_spi_configure &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_status
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_delete
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(FSymTab)
</UL>
<P><STRONG><a name="[c6]"></a>spi_lock</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, spi_flash_sfud.o(i.spi_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = spi_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[c7]"></a>spi_unlock</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, spi_flash_sfud.o(i.spi_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = spi_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[c4]"></a>spi_write_read</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, spi_flash_sfud.o(i.spi_write_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = spi_write_read &rArr; rt_qspi_send_then_recv &rArr; rt_qspi_transfer_message &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_send_then_recv
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[2c2]"></a>mmcsd_set_blksize</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, block_dev.o(i.mmcsd_set_blksize))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = mmcsd_set_blksize &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_unlock
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
</UL>

<P><STRONG><a name="[311]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, block_dev.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
</UL>

<P><STRONG><a name="[b5]"></a>rt_mmcsd_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, block_dev.o(i.rt_mmcsd_close))
<BR>[Address Reference Count : 1]<UL><LI> block_dev.o(i.rt_mmcsd_blk_probe)
</UL>
<P><STRONG><a name="[b8]"></a>rt_mmcsd_control</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, block_dev.o(i.rt_mmcsd_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_mmcsd_control &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> block_dev.o(i.rt_mmcsd_blk_probe)
</UL>
<P><STRONG><a name="[b3]"></a>rt_mmcsd_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, block_dev.o(i.rt_mmcsd_init))
<BR>[Address Reference Count : 1]<UL><LI> block_dev.o(i.rt_mmcsd_blk_probe)
</UL>
<P><STRONG><a name="[b4]"></a>rt_mmcsd_open</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, block_dev.o(i.rt_mmcsd_open))
<BR>[Address Reference Count : 1]<UL><LI> block_dev.o(i.rt_mmcsd_blk_probe)
</UL>
<P><STRONG><a name="[b6]"></a>rt_mmcsd_read</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, block_dev.o(i.rt_mmcsd_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = rt_mmcsd_read &rArr; rt_mmcsd_req_blk &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> block_dev.o(i.rt_mmcsd_blk_probe)
</UL>
<P><STRONG><a name="[30f]"></a>rt_mmcsd_req_blk</STRONG> (Thumb, 398 bytes, Stack size 192 bytes, block_dev.o(i.rt_mmcsd_req_blk))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = rt_mmcsd_req_blk &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_data_timeout
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_unlock
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_lock
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_write
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_read
</UL>

<P><STRONG><a name="[b7]"></a>rt_mmcsd_write</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, block_dev.o(i.rt_mmcsd_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = rt_mmcsd_write &rArr; rt_mmcsd_req_blk &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> block_dev.o(i.rt_mmcsd_blk_probe)
</UL>
<P><STRONG><a name="[352]"></a>cistpl_funce_func</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sdio.o(i.cistpl_funce_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cistpl_funce_func
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
</UL>

<P><STRONG><a name="[353]"></a>cistpl_funce_func0</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, sdio.o(i.cistpl_funce_func0))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cistpl_funce_func0
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
</UL>

<P><STRONG><a name="[354]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdio.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_register_card
</UL>

<P><STRONG><a name="[355]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sdio.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_register_card
</UL>

<P><STRONG><a name="[28a]"></a>sdio_init_card</STRONG> (Thumb, 510 bytes, Stack size 32 bytes, sdio.o(i.sdio_init_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = sdio_init_card &rArr; sdio_initialize_function &rArr; sdio_read_cis &rArr; sdio_io_readb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_use_crc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_clock
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_mode
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_card
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_card_addr
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_send_op_cond
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_free_cis
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_highspeed
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_bus_wide
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_register_card
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cccr
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdio
</UL>

<P><STRONG><a name="[34c]"></a>sdio_initialize_function</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, sdio.o(i.sdio_initialize_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = sdio_initialize_function &rArr; sdio_read_cis &rArr; sdio_io_readb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_free_cis
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_fbr
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[356]"></a>sdio_match_card</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, sdio.o(i.sdio_match_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdio_match_card
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_register_card
</UL>

<P><STRONG><a name="[348]"></a>sdio_read_cccr</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, sdio.o(i.sdio_read_cccr))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = sdio_read_cccr &rArr; sdio_io_readb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readb
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[349]"></a>sdio_read_cis</STRONG> (Thumb, 426 bytes, Stack size 48 bytes, sdio.o(i.sdio_read_cis))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = sdio_read_cis &rArr; sdio_io_readb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readb
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cistpl_funce_func0
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cistpl_funce_func
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[34e]"></a>sdio_read_fbr</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sdio.o(i.sdio_read_fbr))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = sdio_read_fbr &rArr; sdio_io_readb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
</UL>

<P><STRONG><a name="[34d]"></a>sdio_register_card</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, sdio.o(i.sdio_register_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = sdio_register_card &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_match_card
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[34b]"></a>sdio_set_bus_wide</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, sdio.o(i.sdio_set_bus_wide))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = sdio_set_bus_wide &rArr; sdio_io_writeb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_width
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_writeb
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[34a]"></a>sdio_set_highspeed</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sdio.o(i.sdio_set_highspeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = sdio_set_highspeed &rArr; sdio_io_writeb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_writeb
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[2bd]"></a>GET_BITS</STRONG> (Thumb, 94 bytes, Stack size 28 bytes, sd.o(i.GET_BITS))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GET_BITS
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_parse_scr
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_parse_csd
</UL>

<P><STRONG><a name="[2a5]"></a>mmcsd_app_cmd</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, sd.o(i.mmcsd_app_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = mmcsd_app_cmd &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_cmd
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_scr
</UL>

<P><STRONG><a name="[2bc]"></a>mmcsd_parse_csd</STRONG> (Thumb, 612 bytes, Stack size 16 bytes, sd.o(i.mmcsd_parse_csd))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = mmcsd_parse_csd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_BITS
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
</UL>

<P><STRONG><a name="[2be]"></a>mmcsd_parse_scr</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, sd.o(i.mmcsd_parse_scr))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mmcsd_parse_scr &rArr; GET_BITS
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_BITS
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
</UL>

<P><STRONG><a name="[288]"></a>mmcsd_sd_init_card</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, sd.o(i.mmcsd_sd_init_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = mmcsd_sd_init_card &rArr; mmcsd_send_app_op_cond &rArr; mmcsd_send_app_cmd &rArr; mmcsd_app_cmd &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_all_get_cid
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_if_cond
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_op_cond
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_scr
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_app_set_bus_width
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_switch
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_parse_scr
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_parse_csd
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_use_crc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_clock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_width
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_mode
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_card
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_card_addr
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
</UL>

<P><STRONG><a name="[2c1]"></a>mmcsd_switch</STRONG> (Thumb, 334 bytes, Stack size 120 bytes, sd.o(i.mmcsd_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = mmcsd_switch &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_data_timeout
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
</UL>

<P><STRONG><a name="[2c0]"></a>__rt_fls</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, mmcsd_core.o(i.__rt_fls))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_power_up
</UL>

<P><STRONG><a name="[1b8]"></a>_mmcsd_select_card</STRONG> (Thumb, 66 bytes, Stack size 64 bytes, mmcsd_core.o(i._mmcsd_select_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = _mmcsd_select_card &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_card
</UL>

<P><STRONG><a name="[2a8]"></a>mmcsd_delay_ms</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mmcsd_core.o(i.mmcsd_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = mmcsd_delay_ms &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_power_up
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
</UL>

<P><STRONG><a name="[2ae]"></a>mmcsd_power_off</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mmcsd_core.o(i.mmcsd_power_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mmcsd_power_off &rArr; mmcsd_set_iocfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_iocfg
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[2ab]"></a>mmcsd_power_up</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, mmcsd_core.o(i.mmcsd_power_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = mmcsd_power_up &rArr; mmcsd_delay_ms &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_iocfg
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_delay_ms
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fls
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[2bf]"></a>mmcsd_set_iocfg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mmcsd_core.o(i.mmcsd_set_iocfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mmcsd_set_iocfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_chip_select
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_power_up
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_power_off
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_clock
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_width
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_mode
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_voltage
</UL>

<P><STRONG><a name="[29a]"></a>GET_BITS</STRONG> (Thumb, 94 bytes, Stack size 28 bytes, mmc.o(i.GET_BITS))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GET_BITS
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_parse_csd
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_bus_width
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_get_ext_csd
</UL>

<P><STRONG><a name="[298]"></a>mmc_compare_ext_csds</STRONG> (Thumb, 430 bytes, Stack size 24 bytes, mmc.o(i.mmc_compare_ext_csds))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = mmc_compare_ext_csds &rArr; mmc_get_ext_csd &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_get_ext_csd
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_bus_width
</UL>

<P><STRONG><a name="[299]"></a>mmc_get_ext_csd</STRONG> (Thumb, 178 bytes, Stack size 112 bytes, mmc.o(i.mmc_get_ext_csd))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = mmc_get_ext_csd &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_BITS
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_compare_ext_csds
</UL>

<P><STRONG><a name="[29c]"></a>mmc_parse_ext_csd</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, mmc.o(i.mmc_parse_ext_csd))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = mmc_parse_ext_csd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[29d]"></a>mmc_select_bus_width</STRONG> (Thumb, 290 bytes, Stack size 56 bytes, mmc.o(i.mmc_select_bus_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = mmc_select_bus_width &rArr; mmc_compare_ext_csds &rArr; mmc_get_ext_csd &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_delay_ms
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_switch
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_compare_ext_csds
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_BITS
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_width
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[2a2]"></a>mmc_set_card_addr</STRONG> (Thumb, 54 bytes, Stack size 64 bytes, mmc.o(i.mmc_set_card_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = mmc_set_card_addr &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[29e]"></a>mmc_switch</STRONG> (Thumb, 78 bytes, Stack size 72 bytes, mmc.o(i.mmc_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = mmc_switch &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_bus_width
</UL>

<P><STRONG><a name="[2a0]"></a>mmcsd_delay_ms</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mmc.o(i.mmcsd_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = mmcsd_delay_ms &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_bus_width
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_op_cond
</UL>

<P><STRONG><a name="[281]"></a>mmcsd_mmc_init_card</STRONG> (Thumb, 374 bytes, Stack size 48 bytes, mmc.o(i.mmcsd_mmc_init_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = mmcsd_mmc_init_card &rArr; mmc_select_bus_width &rArr; mmc_compare_ext_csds &rArr; mmc_get_ext_csd &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_parse_csd
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_card_addr
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_bus_width
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_parse_ext_csd
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_get_ext_csd
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_op_cond
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_all_get_cid
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_use_crc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_clock
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_mode
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_card
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
</UL>

<P><STRONG><a name="[2b9]"></a>mmcsd_parse_csd</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, mmc.o(i.mmcsd_parse_csd))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = mmcsd_parse_csd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_BITS
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[2eb]"></a>SCB_EnableDCache</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, drv_common.o(i.SCB_EnableDCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCB_EnableDCache
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[2ea]"></a>SCB_EnableICache</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, drv_common.o(i.SCB_EnableICache))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[124]"></a>reboot</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, drv_common.o(i.reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reboot
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_cpu_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_common.o(FSymTab)
</UL>
<P><STRONG><a name="[151]"></a>bit2bitno</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_gpio.o(i.bit2bitno))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_irq_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_dettach_irq
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_pin_attach_irq
</UL>

<P><STRONG><a name="[cc]"></a>stm32_pin_attach_irq</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, drv_gpio.o(i.stm32_pin_attach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stm32_pin_attach_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>stm32_pin_dettach_irq</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, drv_gpio.o(i.stm32_pin_dettach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stm32_pin_dettach_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>stm32_pin_get</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, drv_gpio.o(i.stm32_pin_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stm32_pin_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>stm32_pin_irq_enable</STRONG> (Thumb, 428 bytes, Stack size 56 bytes, drv_gpio.o(i.stm32_pin_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = stm32_pin_irq_enable &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>stm32_pin_mode</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, drv_gpio.o(i.stm32_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = stm32_pin_mode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>stm32_pin_read</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, drv_gpio.o(i.stm32_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stm32_pin_read
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>stm32_pin_write</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, drv_gpio.o(i.stm32_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stm32_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[271]"></a>get_rtc_timestamp</STRONG> (Thumb, 94 bytes, Stack size 72 bytes, drv_rtc.o(i.get_rtc_timestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = get_rtc_timestamp &rArr; mktime
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
</UL>

<P><STRONG><a name="[2f2]"></a>rt_hw_rtc_register</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_rtc.o(i.rt_hw_rtc_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = rt_hw_rtc_register &rArr; rt_rtc_config &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_init
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_config
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_init
</UL>

<P><STRONG><a name="[2f4]"></a>rt_rtc_config</STRONG> (Thumb, 134 bytes, Stack size 200 bytes, drv_rtc.o(i.rt_rtc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = rt_rtc_config &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_register
</UL>

<P><STRONG><a name="[ab]"></a>rt_rtc_control</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, drv_rtc.o(i.rt_rtc_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rt_rtc_control &rArr; set_rtc_time_stamp &rArr; HAL_RTC_SetTime &rArr; RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rtc_time_stamp
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtc_timestamp
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rtc.o(i.rt_hw_rtc_register)
</UL>
<P><STRONG><a name="[2f3]"></a>rt_rtc_init</STRONG> (Thumb, 38 bytes, Stack size 80 bytes, drv_rtc.o(i.rt_rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rt_rtc_init &rArr; HAL_RCC_OscConfig &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_register
</UL>

<P><STRONG><a name="[322]"></a>set_rtc_time_stamp</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, drv_rtc.o(i.set_rtc_time_stamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = set_rtc_time_stamp &rArr; HAL_RTC_SetTime &rArr; RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
</UL>

<P><STRONG><a name="[2f7]"></a>rt_hw_spi_bus_init</STRONG> (Thumb, 400 bytes, Stack size 16 bytes, drv_spi.o(i.rt_hw_spi_bus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rt_hw_spi_bus_init &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_init
</UL>

<P><STRONG><a name="[d0]"></a>spi_configure</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, drv_spi.o(i.spi_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = spi_configure &rArr; stm32_spi_init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>spixfer</STRONG> (Thumb, 466 bytes, Stack size 56 bytes, drv_spi.o(i.spixfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = spixfer &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_DMA
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_DMA
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.constdata)
</UL>
<P><STRONG><a name="[2ff]"></a>stm32_get_dma_info</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_spi.o(i.stm32_get_dma_info))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_init
</UL>

<P><STRONG><a name="[35f]"></a>stm32_spi_init</STRONG> (Thumb, 516 bytes, Stack size 24 bytes, drv_spi.o(i.stm32_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = stm32_spi_init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_configure
</UL>

<P><STRONG><a name="[d2]"></a>stm32_configure</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, drv_usart.o(i.stm32_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = stm32_configure &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>stm32_control</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, drv_usart.o(i.stm32_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = stm32_control &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>stm32_dma_transmit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, drv_usart.o(i.stm32_dma_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = stm32_dma_transmit &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>stm32_getc</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_usart.o(i.stm32_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stm32_getc &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>stm32_putc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, drv_usart.o(i.stm32_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stm32_putc &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[301]"></a>stm32_uart_get_dma_config</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_usart.o(i.stm32_uart_get_dma_config))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>

<P><STRONG><a name="[197]"></a>uart_isr</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, drv_usart.o(i.uart_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = uart_isr &rArr; rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>qspi_configure</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_qspi.o(i.qspi_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = qspi_configure &rArr; stm32_qspi_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_qspi_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_qspi.o(.constdata)
</UL>
<P><STRONG><a name="[2cd]"></a>qspi_send_cmd</STRONG> (Thumb, 240 bytes, Stack size 72 bytes, drv_qspi.o(i.qspi_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = qspi_send_cmd &rArr; HAL_QSPI_Command &rArr; QSPI_WaitFlagStateUntilTimeout &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Command
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspixfer
</UL>

<P><STRONG><a name="[d8]"></a>qspixfer</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, drv_qspi.o(i.qspixfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = qspixfer &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Transmit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Receive
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_send_cmd
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_qspi.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>rt_hw_qspi_bus_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_qspi.o(i.rt_hw_qspi_bus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = rt_hw_qspi_bus_init &rArr; stm32_qspi_register_bus &rArr; rt_qspi_bus_register &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_qspi_register_bus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_qspi.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[2cb]"></a>stm32_qspi_init</STRONG> (Thumb, 286 bytes, Stack size 104 bytes, drv_qspi.o(i.stm32_qspi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = stm32_qspi_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_QSPI_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qspi_configure
</UL>

<P><STRONG><a name="[2f1]"></a>stm32_qspi_register_bus</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_qspi.o(i.stm32_qspi_register_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = stm32_qspi_register_bus &rArr; rt_qspi_bus_register &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_qspi_bus_register
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_qspi_bus_init
</UL>

<P><STRONG><a name="[14d]"></a>HAL_FMC_MspInit</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, drv_sdram.o(i.HAL_FMC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
</UL>

<P><STRONG><a name="[f5]"></a>SDRAM_Init</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, drv_sdram.o(i.SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = SDRAM_Init &rArr; rt_memheap_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Initialization_Sequence
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memheap_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sdram.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[199]"></a>SDRAM_Initialization_Sequence</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, drv_sdram.o(i.SDRAM_Initialization_Sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SDRAM_Initialization_Sequence &rArr; HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Init
</UL>

<P><STRONG><a name="[126]"></a>sdram_t</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, drv_sdram.o(i.sdram_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = sdram_t &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sdram.o(FSymTab)
</UL>
<P><STRONG><a name="[1d8]"></a>num2str</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, time.o(i.num2str))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime_r
</UL>

<P><STRONG><a name="[1d1]"></a>aai_write</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, sfud.o(i.aai_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_adress_byte_array
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
</UL>

<P><STRONG><a name="[277]"></a>hardware_init</STRONG> (Thumb, 530 bytes, Stack size 24 bytes, sfud.o(i.hardware_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = hardware_init &rArr; sfud_read_sfdp &rArr; read_basic_table &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_spi_port_init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_4_byte_address_mode
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_jedec_id
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
</UL>

<P><STRONG><a name="[1d4]"></a>make_adress_byte_array</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, sfud.o(i.make_adress_byte_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = make_adress_byte_array
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
</UL>

<P><STRONG><a name="[1d2]"></a>page256_or_1_byte_write</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, sfud.o(i.page256_or_1_byte_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = page256_or_1_byte_write &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_adress_byte_array
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
</UL>

<P><STRONG><a name="[35e]"></a>qspi_set_read_cmd_format</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, sfud.o(i.qspi_set_read_cmd_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = qspi_set_read_cmd_format
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_qspi_fast_read_enable
</UL>

<P><STRONG><a name="[279]"></a>read_jedec_id</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, sfud.o(i.read_jedec_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = read_jedec_id &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[27b]"></a>reset</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, sfud.o(i.reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = reset &rArr; wait_busy &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[27d]"></a>set_4_byte_address_mode</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, sfud.o(i.set_4_byte_address_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = set_4_byte_address_mode &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[1d3]"></a>set_write_enabled</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, sfud.o(i.set_write_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_4_byte_address_mode
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
</UL>

<P><STRONG><a name="[35c]"></a>software_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sfud.o(i.software_init))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
</UL>

<P><STRONG><a name="[1d5]"></a>wait_busy</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, sfud.o(i.wait_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = wait_busy &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
</UL>

<P><STRONG><a name="[2ce]"></a>read_basic_header</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, sfud_sfdp.o(i.read_basic_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = read_basic_header &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_data
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
</UL>

<P><STRONG><a name="[2d0]"></a>read_basic_table</STRONG> (Thumb, 618 bytes, Stack size 72 bytes, sfud_sfdp.o(i.read_basic_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = read_basic_table &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_data
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
</UL>

<P><STRONG><a name="[2cf]"></a>read_sfdp_data</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, sfud_sfdp.o(i.read_sfdp_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_sfdp_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_header
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_table
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_header
</UL>

<P><STRONG><a name="[2d1]"></a>read_sfdp_header</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, sfud_sfdp.o(i.read_sfdp_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = read_sfdp_header &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_data
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
</UL>

<P><STRONG><a name="[255]"></a>fd_alloc</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, dfs.o(i.fd_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = fd_alloc &rArr; rt_realloc &rArr; rt_memheap_realloc &rArr; rt_memheap_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
</UL>

<P><STRONG><a name="[1b6]"></a>_get_path_lastname</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfs_file.o(i._get_path_lastname))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_path_lastname
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>

<P><STRONG><a name="[1fa]"></a>copydir</STRONG> (Thumb, 246 bytes, Stack size 384 bytes, dfs_file.o(i.copydir))
<BR><BR>[Stack]<UL><LI>Max Depth = 844 + In Cycle
<LI>Call Chain = copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>

<P><STRONG><a name="[1f9]"></a>copyfile</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, dfs_file.o(i.copyfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = copyfile &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_memheap_alloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_write
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>

<P><STRONG><a name="[df]"></a>dfs_device_fs_poll</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, devfs.o(i.dfs_device_fs_poll))
<BR>[Address Reference Count : 1]<UL><LI> devfs.o(.constdata)
</UL>
<P><STRONG><a name="[1e6]"></a>check_fs</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[202]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[249]"></a>clmt_clust</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, ff.o(i.clmt_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[23c]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[1fd]"></a>create_chain</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[200]"></a>create_name</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = create_name &rArr; mem_set
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[236]"></a>dir_alloc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[239]"></a>dir_find</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[238]"></a>dir_next</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[23d]"></a>dir_read</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[23e]"></a>dir_register</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[240]"></a>dir_remove</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ff.o(i.dir_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dir_remove &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[237]"></a>dir_sdi</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[248]"></a>find_volume</STRONG> (Thumb, 822 bytes, Stack size 88 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[24a]"></a>follow_path</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[1fe]"></a>get_fat</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[254]"></a>get_fileinfo</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_fileinfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[250]"></a>get_ldnumber</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[253]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[1e9]"></a>ld_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[1e8]"></a>ld_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[23a]"></a>mem_cmp</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[23f]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[201]"></a>mem_set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[1e7]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[1ff]"></a>put_fat</STRONG> (Thumb, 400 bytes, Stack size 40 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[24f]"></a>remove_chain</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[24d]"></a>st_clust</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ff.o(i.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[24c]"></a>st_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[252]"></a>st_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[24e]"></a>sync_fs</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[23b]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sync_window &rArr; disk_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[247]"></a>validate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[214]"></a>elm_result_to_dfs</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, dfs_elm.o(i.elm_result_to_dfs))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_ioctl
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
</UL>

<P><STRONG><a name="[21a]"></a>get_disk</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dfs_elm.o(i.get_disk))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[1b3]"></a>_printf_core</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, printf2.o(i._printf_core), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf$2
</UL>

<P><STRONG><a name="[a2]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printf2.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printf2.o(i.__0snprintf$2)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
